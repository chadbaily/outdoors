head	1.2;
access;
symbols
	init:1.1.1.1 socialclub:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2004.08.28.13.27.37;	author at;	state dead;
branches;
next	1.1;

1.1
date	2004.05.30.03.10.35;	author at;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.30.03.10.35;	author at;	state Exp;
branches;
next	;


desc
@@


1.2
log
@not needed anymore; moved to new functionality in datechooser.js
@
text
@var gNow = new Date();
var ggWinCal;

Calendar.Months = ["January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December"];

// Non-Leap year Month days..
Calendar.DOMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
// Leap year Month days..
Calendar.lDOMonth = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

function Calendar(p_item, p_WinCal, p_month, p_year, datetime, hour, min, ampm) {
    if ((p_month == null) && (p_year == null))  return;

    if (p_WinCal == null)
        this.gWinCal = ggWinCal;
    else
        this.gWinCal = p_WinCal;

    if (p_month == null) {
        this.gMonthName = null;
        this.gMonth = null;
        this.gYearly = true;
    } else {
        this.gMonthName = Calendar.get_month(p_month);
        this.gMonth = new Number(p_month);
        this.gYearly = false;
    }

    this.gYear = p_year;
    this.gReturnItem = p_item;
    this.gHour = hour;
    this.gMin = min;
    this.gAmPm = ampm;
    this.datetime = datetime ? true : false;
}

Calendar.get_month = Calendar_get_month;
Calendar.get_daysofmonth = Calendar_get_daysofmonth;
Calendar.calc_month_year = Calendar_calc_month_year;
Calendar.print = Calendar_print;

function Calendar_get_month(monthNo) {
    return Calendar.Months[monthNo];
}

function Calendar_get_daysofmonth(monthNo, p_year) {
    /*
    Check for leap year ..
    1.Years evenly divisible by four are normally leap years, except for...
    2.Years also evenly divisible by 100 are not leap years, except for...
    3.Years also evenly divisible by 400 are leap years.
    */
    if ((p_year % 4) == 0) {
        if ((p_year % 100) == 0 && (p_year % 400) != 0)
            return Calendar.DOMonth[monthNo];

        return Calendar.lDOMonth[monthNo];
    } else
        return Calendar.DOMonth[monthNo];
}

function Calendar_calc_month_year(p_Month, p_Year, incr) {
    /*
    Will return an 1-D array with 1st element being the calculated month
    and second being the calculated year
    after applying the month increment/decrement as specified by 'incr' parameter.
    'incr' will normally have 1/-1 to navigate thru the months.
    */
    var ret_arr = new Array();

    if (incr == -1) {
        // B A C K W A R D
        if (p_Month == 0) {
            ret_arr[0] = 11;
            ret_arr[1] = parseInt(p_Year) - 1;
        }
        else {
            ret_arr[0] = parseInt(p_Month) - 1;
            ret_arr[1] = parseInt(p_Year);
        }
    } else if (incr == 1) {
        // F O R W A R D
        if (p_Month == 11) {
            ret_arr[0] = 0;
            ret_arr[1] = parseInt(p_Year) + 1;
        }
        else {
            ret_arr[0] = parseInt(p_Month) + 1;
            ret_arr[1] = parseInt(p_Year);
        }
    }

    return ret_arr;
}

function Calendar_print() {
    ggWinCal.print();
}

function Calendar_calc_month_year(p_Month, p_Year, incr) {
    /*
    Will return an 1-D array with 1st element being the calculated month
    and second being the calculated year
    after applying the month increment/decrement as specified by 'incr' parameter.
    'incr' will normally have 1/-1 to navigate thru the months.
    */
    var ret_arr = new Array();

    if (incr == -1) {
        // B A C K W A R D
        if (p_Month == 0) {
            ret_arr[0] = 11;
            ret_arr[1] = parseInt(p_Year) - 1;
        }
        else {
            ret_arr[0] = parseInt(p_Month) - 1;
            ret_arr[1] = parseInt(p_Year);
        }
    } else if (incr == 1) {
        // F O R W A R D
        if (p_Month == 11) {
            ret_arr[0] = 0;
            ret_arr[1] = parseInt(p_Year) + 1;
        }
        else {
            ret_arr[0] = parseInt(p_Month) + 1;
            ret_arr[1] = parseInt(p_Year);
        }
    }

    return ret_arr;
}

// This is for compatibility with Navigator 3, we have to create and discard one object before the prototype object exists.
new Calendar();

Calendar.prototype.getMonthlyCalendarCode = function() {
    var vCode = "";
    var vHeader_Code = "";
    var vData_Code = "";

    // Begin Table Drawing code here..
    vCode = vCode + "<table class=borders align=center>";

    vHeader_Code = this.cal_header();
    vData_Code = this.cal_data();
    vCode = vCode + vHeader_Code + vData_Code;

    vCode = vCode + "</table>";
    if(this.datetime){
        vCode += "<br><center><form name=form><select name=hour>"
        + "<option" + (this.gHour == 12 ? " selected" : "") + ">12</option>"
        + "<option" + (this.gHour == 1 ? " selected" : "") + ">1</option>"
        + "<option" + (this.gHour == 2 ? " selected" : "") + ">2</option>"
        + "<option" + (this.gHour == 3 ? " selected" : "") + ">3</option>"
        + "<option" + (this.gHour == 4 ? " selected" : "") + ">4</option>"
        + "<option" + (this.gHour == 5 ? " selected" : "") + ">5</option>"
        + "<option" + (this.gHour == 6 ? " selected" : "") + ">6</option>"
        + "<option" + (this.gHour == 7 ? " selected" : "") + ">7</option>"
        + "<option" + (this.gHour == 8 ? " selected" : "") + ">8</option>"
        + "<option" + (this.gHour == 9 ? " selected" : "") + ">9</option>"
        + "<option" + (this.gHour == 10 ? " selected" : "") + ">10</option>"
        + "<option" + (this.gHour == 11 ? " selected" : "") + ">11</option>"
        + "</select><select name=min>"
        + "<option" + (this.gMin == "00" ? " selected" : "") + ">00</option>"
        + "<option" + (this.gMin == "15" ? " selected" : "") + ">15</option>"
        + "<option" + (this.gMin == "30" ? " selected" : "") + ">30</option>"
        + "<option" + (this.gMin == "45" ? " selected" : "") + ">45</option>"
        + "</select><select name=ap>"
        + "<option" + (this.gAmPm == "AM" ? " selected" : "") + ">AM</option>"
        + "<option" + (this.gAmPm == "PM" ? " selected" : "") + ">PM</option>"
        + "</select></form></center>";
    }

    return vCode;
}

Calendar.prototype.show = function() {
    var vCode = "";

    this.gWinCal.document.open();

    // Setup the page...
    this.wwrite("<html>");
    this.wwrite("<head><title>Calendar</title>");
    this.wwrite("<link rel='stylesheet' type='text/css' href='/~outdoors/css.php'></head>");
    this.wwrite("<style type='text/css'>td.today{background:silver}</style>");

    this.wwrite("<body>");

    // Show navigation buttons
    var prevMMYYYY = Calendar.calc_month_year(this.gMonth, this.gYear, -1);
    var prevMM = prevMMYYYY[0];
    var prevYYYY = prevMMYYYY[1];

    var nextMMYYYY = Calendar.calc_month_year(this.gMonth, this.gYear, 1);
    var nextMM = nextMMYYYY[0];
    var nextYYYY = nextMMYYYY[1];

    this.wwrite("<table width='100%'>");
    this.wwriteA("<caption>" + this.gMonthName + " " + this.gYear + "</caption>");
    this.wwrite("<tr><td align=center>");
    this.wwrite("[<A HREF=\"" +
        "javascript:window.opener.Build(" +
        "'" + this.gReturnItem + "', '" + this.gMonth + "', '"
        + (parseInt(this.gYear)-1) + "', " + this.datetime + ", "
        + this.gHour + ", '" + this.gMin + "', '" + this.gAmPm + "');" +
        "\"><<<\/a>]</td><TD ALIGN=center>");
    this.wwrite("[<A HREF=\"" +
        "javascript:window.opener.Build(" +
        "'" + this.gReturnItem + "', '" + prevMM + "', '" + prevYYYY
        + "', " + this.datetime + ", "
        + this.gHour + ", '" + this.gMin + "', '" + this.gAmPm + "');" +
        "\"><<\/A>]</TD>");
    this.wwrite("<TD ALIGN=center>");
    this.wwrite("[<A HREF=\"" +
        "javascript:window.opener.Build(" +
        "'" + this.gReturnItem + "', '" + nextMM + "', '"
        + nextYYYY + "', " + this.datetime + ", "
        + this.gHour + ", '" + this.gMin + "', '" + this.gAmPm + "');" +
        "\">><\/A>]</TD><TD ALIGN=center>");
    this.wwrite("[<A HREF=\"" +
        "javascript:window.opener.Build(" +
        "'" + this.gReturnItem + "', '" + this.gMonth + "', '"
        + (parseInt(this.gYear)+1) + "', " + this.datetime + ", "
        + this.gHour + ", '" + this.gMin + "', '" + this.gAmPm + "');" +
        "\">>><\/A>]</TD></TR></TABLE>");

    // Get the complete calendar code for the month..
    vCode = this.getMonthlyCalendarCode();
    this.wwrite(vCode);

    this.wwrite("</font></body></html>");
    this.gWinCal.document.close();
}

Calendar.prototype.wwrite = function(wtext) {
    this.gWinCal.document.writeln(wtext);
}

Calendar.prototype.wwriteA = function(wtext) {
    this.gWinCal.document.write(wtext);
}

Calendar.prototype.cal_header = function() {
    return "<tr>"
        + "<th width='14%'>Sun</th>"
        + "<th width='14%'>Mon</th>"
        + "<th width='14%'>Tue</th>"
        + "<th width='14%'>Wed</th>"
        + "<th width='14%'>Thu</th>"
        + "<th width='14%'>Fri</th>"
        + "<th width='14%'>Sat</th>"
        + "</tr>";
}

Calendar.prototype.cal_data = function() {
    var vDate = new Date();
    vDate.setDate(1);
    vDate.setMonth(this.gMonth);
    vDate.setFullYear(this.gYear);

    var vFirstDay=vDate.getDay();
    var vDay=1;
    var vLastDay=Calendar.get_daysofmonth(this.gMonth, this.gYear);
    var vOnLastDay=0;
    var vCode = "";

    /*
    Get day for the 1st of the requested month/year..
    Place as many blank cells before the 1st day of the month as necessary.
    */

    vCode = vCode + "<TR align=right>";
    for (i=0; i<vFirstDay; i++) {
        vCode = vCode + "<TD>&nbsp;</TD>";
    }

    // Write rest of the 1st week
    for (j=vFirstDay; j<7; j++) {
        vCode = vCode + "<td "
            + (this.isToday(vDay) ? " class='today'" : "")
            + "><A HREF='#' onClick=\"self.opener.document."
            + this.gReturnItem + ".value='" +
                this.format_data(vDay) +
                "window.close();\">" + vDay + "</A></TD>";
        vDay=vDay + 1;
    }
    vCode = vCode + "</TR>";

    // Write the rest of the weeks
    for (k=2; k<7; k++) {
        vCode = vCode + "<TR align=right>";

        for (j=0; j<7; j++) {
            vCode = vCode + "<td"
            + (this.isToday(vDay) ? " class='today'" : "")
            + "><A HREF='#' onClick=\"self.opener.document."
            + this.gReturnItem + ".value='" +
                    this.format_data(vDay) +
                "window.close();\">" + vDay + "</A></TD>";
            vDay=vDay + 1;

            if (vDay > vLastDay) {
                vOnLastDay = 1;
                break;
            }
        }

        if (j == 6)
            vCode = vCode + "</TR>";
        if (vOnLastDay == 1)
            break;
    }

    // Fill up the rest of last week with proper blanks, so that we get proper square blocks
    for (m=1; m<(7-j); m++) {
            vCode = vCode + "<TD>&nbsp;</TD>";
    }

    return vCode;
}

Calendar.prototype.isToday = function(vday) {
    var vNowDay = gNow.getDate();
    var vNowMonth = gNow.getMonth();
    var vNowYear = gNow.getFullYear();

    if (vday == vNowDay && this.gMonth == vNowMonth && this.gYear == vNowYear)
        return true;
    else
        return false;
}


Calendar.prototype.format_data = function(p_day) {
    var vData;
    var vMonth = 1 + this.gMonth;
    vMonth = (vMonth.toString().length < 2) ? "0" + vMonth : vMonth;
    var vMon = Calendar.get_month(this.gMonth).substring(0,3).toUpperCase();
    var vFMon = Calendar.get_month(this.gMonth).toUpperCase();
    var vY4 = new String(this.gYear);
    var vY2 = new String(vY4.substring(2,2));
    var vDD = (p_day.toString().length < 2) ? "0" + p_day : p_day;
//    result = "'";
    result = vY4 + "-" + vMonth + "-" + vDD;
    if(this.datetime){
        result += " ' + opener.Reformat_datetime( document.forms[0].elements['hour'].options[document.forms[0].elements['hour'].selectedIndex].text, " +
      		"document.forms[0].elements['min'].options[document.forms[0].elements['min'].selectedIndex].text, " + 
       		"document.forms[0].elements['ap'].options[document.forms[0].elements['ap'].selectedIndex].text); ";

    }
    else{
        result += "';";
    }
    return result;
}

function Reformat_datetime(hour, min, ampm) {
  var extraHours = 0; 
  if (ampm == 'PM') {
	extraHours = 12;
  }
  var hours = new Number(hour);
  var hours2 = hours + extraHours;
  var zero = "";
  if (hours2 < 10) {
	zero = "0";
  }

  return zero + hours2.toString() + ":" + min + ":00";
}


function Build(p_item, p_month, p_year, datetime, hour, min, ampm) {
    var p_WinCal = ggWinCal;
    gCal = new Calendar(p_item, p_WinCal, p_month, p_year, datetime, hour, min,
    ampm);

    // Choose appropriate show function
    if (gCal.gYearly)   gCal.showY();
    else    gCal.show();
}

// Accepts the following parameters: 'form.element' is the form element that the
// result goes into, then optionally year and month follow.
function show_calendar() {
    /*
        p_month : 0-11 for Jan-Dec; 12 for All Months.
        p_year  : 4-digit year
        p_item  : Return Item.
        datetime: whether to include time information too
    */

    var p_month = 0;
    var p_year = 0;

    // The form element to put the result into
    p_item = arguments[0];
    // Get parameters that may have been passed in
    if (arguments[1] == "" || arguments[1] == null)
        p_year = new String(gNow.getFullYear().toString());
    else
        p_year = arguments[1];
    if (arguments[2] != "" && arguments[2] == null)
        p_month = new String(gNow.getMonth().toString());
    else
        p_month = arguments[2] - 1;

    p_datetime = arguments[3];

    var p_hour = "12";
    var p_min = "00";
    var p_ampm = "AM";

    // If there is already a value in the form field, use it to override the
    // month and year that may have been passed in
    eval("existingValue = document." + p_item + ".value;");
    if(existingValue != null){
        // Test for the existence of regular expression support
        if(existingValue.match != null){
            var re = /^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d?):(\d\d) ([a-z][a-z])$/i;
            var arr = existingValue.match(re);
            if(arr != null){
                p_year = parseInt(arr[1]);
                p_month = parseInt(arr[2]) - 1;
                p_hour = arr[4];
                p_min = arr[5];
                p_ampm = arr[6].toUpperCase();
            }
        }
    }


    vWinCal = window.open("", "Calendar",
        "width=250,height=250,status=no,resizable=no,top=200,left=200");
    vWinCal.opener = self;
    ggWinCal = vWinCal;

    Build(p_item, p_month, p_year, p_datetime, p_hour, p_min, p_ampm);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@init
@
text
@@
