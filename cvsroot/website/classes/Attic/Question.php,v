head	1.3;
access;
symbols
	init:1.1.1.1 socialclub:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2004.10.21.20.54.20;	author at;	state dead;
branches;
next	1.2;

1.2
date	2004.07.20.14.11.06;	author at;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.30.03.10.36;	author at;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.30.03.10.36;	author at;	state Exp;
branches;
next	;


desc
@@


1.3
log
@classes moved to files that match the database table names
@
text
@<?php
/*
 * This file is part of SocialClub (http://socialclub.sourceforge.net)
 * Copyright (C) 2004 Baron Schwartz <baron at sequent dot org>
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307  USA
 * 
 * $Id: Question.php,v 1.2 2004/07/20 14:11:06 at Exp $
 */

include_once("DatabaseObject.php");

class Question extends DatabaseObject {
    // {{{declarations
    var $c_adventure = null; // Adventure
    var $c_text = null; // String
    var $c_type = null; // String
    var $answers; // Answer
    // }}}

    /* {{{constructor
     *
     */
    function Question() {
        $this->DatabaseObject();
        $this->table = "[_]question";
        $this->cascadeFunctions[] = "getAnswers";
    } //}}}

    /* {{{getAdventure
     *
     */
    function getAdventure() {
        return $this->c_adventure;
    } //}}}

    /* {{{setAdventure
     *
     */
    function setAdventure($value) {
        $this->c_adventure = $value;
    } //}}}

    /* {{{getText
     *
     */
    function getText() {
        return $this->c_text;
    } //}}}

    /* {{{setText
     *
     */
    function setText($value) {
        $this->c_text = $value;
    } //}}}

    /* {{{getType
     *
     */
    function getType() {
        return $this->c_type;
    } //}}}

    /* {{{setType
     *
     */
    function setType($value) {
        if ($value != "text" && $value != "bool") {
            trigger_error("Bad question type: '$value'", E_USER_ERROR);
        }
        $this->c_type = $value;
    } //}}}

    /* {{{initAnswers
     * You do not need to call this directly.  You can just call getAnswers
     * and it will call this if need be.
     */
    function initAnswers() {
        global $obj;
        $this->ensureUID(__LINE__, __FILE__);
        $this->answers = array();
        $result = $obj['conn']->query("select * from [_]answer where c_question="
            . "$this->c_uid order by c_created_date");
        while ($row = $result->fetchRow()) {
            $this->answers[$row['c_uid']] =& new Answer();
            $this->answers[$row['c_uid']]->initFromRow($row);
        }
    } //}}}

    /* {{{getAnswers
     * Returns the answers associated with the question.  Calls initAnswers
     * if needed; if you want to force it to call, pass a TRUE parameter.
     */
    function &getAnswers($refresh = FALSE) {
        if (is_null($this->answers) || $refresh) {
            $this->initAnswers();
        }
        return $this->answers;
    } //}}}

}
?>
@


1.2
log
@put table name prefixes into code
@
text
@d20 1
a20 1
 * $Id: Question.php,v 1.1.1.1 2004/05/30 03:10:36 at Exp $
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
 * $Id: Question.php,v 1.4 2004/05/30 01:41:56 baron Exp $
d38 1
a38 1
        $this->table = "t_question";
d95 1
a95 1
        $result = $obj['conn']->query("select * from t_answer where c_question="
@


1.1.1.1
log
@init
@
text
@@
