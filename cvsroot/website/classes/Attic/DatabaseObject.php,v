head	1.14;
access;
symbols
	init:1.1.1.1 socialclub:1.1.1;
locks; strict;
comment	@# @;


1.14
date	2004.10.21.20.54.19;	author at;	state dead;
branches;
next	1.13;

1.13
date	2004.10.06.14.13.53;	author at;	state Exp;
branches;
next	1.12;

1.12
date	2004.09.20.20.38.38;	author at;	state Exp;
branches;
next	1.11;

1.11
date	2004.09.20.19.47.28;	author at;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.18.15.22.59;	author at;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.18.14.30.05;	author at;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.24.03.25.30;	author at;	state Exp;
branches;
next	1.7;

1.7
date	2004.08.20.20.33.13;	author at;	state Exp;
branches;
next	1.6;

1.6
date	2004.08.17.22.22.16;	author at;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.26.12.31.38;	author at;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.26.02.12.31;	author at;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.26.00.31.43;	author at;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.20.14.11.06;	author at;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.30.03.10.36;	author at;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.30.03.10.36;	author at;	state Exp;
branches;
next	;


desc
@@


1.14
log
@classes moved to files that match the database table names
@
text
@<?php
/*
 * This file is part of SocialClub (http://socialclub.sourceforge.net)
 * Copyright (C) 2004 Baron Schwartz <baron at sequent dot org>
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307  USA
 * 
 * $Id: DatabaseObject.php,v 1.13 2004/10/06 14:13:53 at Exp $
 */

include_once("Object.php");
include_once("DateTime.php");
include_once("Table.php");

class DatabaseObject extends Object {
    // {{{declarations
    var $c_uid = null;              // The object's primary key in the database.
    var $c_owner = null;            // Member
    var $c_creator = null;          // Member
    var $c_group = null;            // Group
    var $c_unixperms = null;        // String; Unix permissions
    var $c_created_date = null;     // String
    var $c_last_modified = null;    // Timestamp
    var $c_status = null;           // Status
    var $c_flags = null;            // Bit-flags, stored as int

    var $allowedActions;            // Actions the current user is allowed to do
    var $table;                     // The table (string) that this is stored in
    var $cascadeFunctions;          // An array of function names that you can
                                    // call to see what other objects should be
                                    // deleted along with this object.
    // }}}

    /* {{{constructor
     *
     */
    function DatabaseObject() {
        $this->Object();
        $this->cascadeFunctions = array();
    } //}}}

    /* {{{copy
     * Returns a new object with the same properties, except for the common
     * properties that exist in every object such as owner and creation date;
     * these are set to null.
     */
    function copy() {
        $newObject = $this;
        $newObject->c_uid = null;
        $newObject->c_owner = null;
        $newObject->c_creator = null;
        $newObject->c_created_date = null;
        return $newObject;
    } //}}}

    /* {{{getDatabaseVars
     * This method returns an array of all the variables that correspond
     * directly to some column in the database.  That's why these variables are
     * named with the leading c_, so they can be easily (and programmatically)
     * distinguished from other variables and used to auto-generate queries that
     * will insert, select, and update the object, as well as automatically
     * insert the object into a template (see insertIntoTemplate()).
     */
    function &getDatabaseVars() {
        $someVariables = array();
        foreach (array_keys(get_class_vars(get_class($this))) as $key) {
            if (substr($key, 0, 2) == "c_") {
                $someVariables[$key] = $key;
            }
        }
        return $someVariables;
    } //}}}

    /* {{{setUpDatabaseDefaults
     * This function, which should be overriden as appropriate, sets up various
     * defaults so the code doesn't always have to call them.  This is in
     * preparation for inserting, updating, and so on.  It is automatically
     * called as appropriate (in other words, you shouldn't need to call it from
     * outside DatabaseObject).  Not all things are set here; many defaults are
     * set at a per-table level in the database.
     */
    function setUpDatabaseDefaults() {
        global $cfg;
        if (is_null($this->c_created_date)) {
            $this->c_created_date = date("Y-m-d H:i:s");
        }
        if (is_null($this->c_owner) && isset($cfg['user'])) {
            $this->c_owner = $cfg['user'];
        }
        if (is_null($this->c_creator) && isset($cfg['user'])) {
            $this->c_creator = $cfg['user'];
        }
    } //}}}

    /* {{{insert
     */
    function insert() {
        return $this->doInsert();
    } //}}}

    /* {{{getClass
     * Returns the object's type.
     */
    function getClass() {
        $guess = $this->tableToType($this->table);
        if ( strtoupper($guess) == strtoupper(get_class($this))) {
            return $guess;
        }
        return get_class($this);
    } //}}}

    /* {{{doInsert
     * This is a helper method.  It inserts the object into the database, and
     * then returns the object's new c_uid value.  As a side effect, it also
     * sets the object's $c_uid.  This should be called from a subclass's
     * insert() method, after the subclass has done any necessary setup work to
     * prepare the data for insertion!
     */
    function doInsert() {
        global $obj;

        $this->setUpDatabaseDefaults();

        $vars =& $this->getDatabaseVars();
        foreach ($vars as $key => $val) {
            if (is_null($this->$key)) {
                unset($vars[$key]);
            }
        }
        // Null out the timestamp column so it will get auto-incremented by the
        // DB upon insertion.
        unset($vars['c_last_modified']);

        // Make an array suitable for passing to autoExecute(), in the format
        // 'c_foobar' => $this->c_foobar.  This depends on the database columns
        // being named the same as the class variables.
        $array = array();
        foreach ($vars as $key => $value) {
            $array[$key] = $this->$key;
        }

        $cmd =& $obj['conn']->createCommand();
        $res =& $cmd->autoExecute($this->table, $array, DB_AUTOQUERY_INSERT);
        $this->c_uid = intval($res->identity());
        return $this->c_uid;
    } //}}}

    /* {{{update
     */
    function update() {
        $this->doUpdate();
    } //}}}

    /* {{{doUpdate
     * Does the heavy lifting for the update operation.  This method assumes
     * that all setup has been done, then automagically generates and executes a
     * query to store the object into the database.
     */
    function doUpdate() {
        global $obj;
        $this->ensureUID(__LINE__, __FILE__);
        $vars =& $this->getDatabaseVars();
        # Some special cases: we don't want to try to explicitly set c_uid,
        # c_last_modified, or anything that's NULL.
        unset($vars['c_uid']);
        unset($vars['c_last_modified']);
        foreach ($vars as $key => $val) {
            if (is_null($this->$key)) {
                unset($vars[$key]);
            }
        }

        // Make an array suitable for passing to autoExecute()
        $array = array();
        foreach ($vars as $key => $value) {
            $array[$key] = $this->$key;
        }

        // Now use this to update the object's tuple in the database.
        $cmd =& $obj['conn']->createCommand();
        $cmd->autoExecute($this->table, $array, DB_AUTOQUERY_UPDATE,
            "c_uid = " . intval($this->c_uid));
    } //}}}

    /* {{{select
     * Populates $this from the database.  Requires the primary key from the
     * database, obviously.  If $strict is false, it won't complain very hard
     * about there not being a row in the database with that primary key value.
     */
    function select($uid, $strict = true) {
        global $obj;
        if ($strict && !$uid || !$this->table) {
            trigger_error("No UID passed into select(), or no table defined, in class "
                    .  $this->getClass(), E_USER_ERROR);
            return false;
        }
        $result =& $obj['conn']->query("select * from $this->table where c_uid = {uid,int}",
            array('uid' => $uid));
        if ($strict && $result->numRows() == 0) {
            trigger_error("There is no row in $this->table with c_uid $uid",
                    E_USER_ERROR);
            return false;
        }
        if ($result->numRows() > 0) {
            $row =& $result->fetchRow();
            $this->initFromRow($row);
        }
        return true;
    } //}}}

    /* {{{selectAll
     * Returns a list of every object of this type that exists in the database,
     * with an optional query if you don't want to let it just return everything
     * from the table.  This function cannot be called statically; you must have
     * an instance of the object to call it on.
     */
    function &selectAll($query = false) {
        global $obj;
        $objects = array();
        $type = $this->tableToType($this->table);
        $result =& $obj['conn']->query($query ? $query : "select * from $this->table");
        while ($row =& $result->fetchRow()) {
            $objects[$row['c_uid']] =& new $type();
            $objects[$row['c_uid']]->initFromRow($row, $type);
        }
        return $objects;
    } //}}}

    /* {{{delete
     * Deletes this item from the database.  Usually the item is just marked
     * with a status as deleted, but if the optional parameter $reallyDelete is
     * TRUE the record will really be deleted.
     */
    function delete($reallyDelete = FALSE, $cascade = FALSE) {
        global $obj;
        global $cfg;

        # Save a reference to this object to avoid infinite recursion
        if (isset($obj['visited-objects'][$this->GUID])) {
            return;
        }
        else {
            $obj['visited-objects'][$this->GUID] = 1;
        }

        $this->ensureUID(__LINE__, __FILE__);

        if ($cascade) {
            # Iterate through the methods that are defined to return the objects
            # that need to be deleted when this object is deleted, and call the
            # method on each (it should be a getFoo() method), and then call
            # delete() recursively on each of those objects.
            foreach ($this->cascadeFunctions as $key => $func) {
                foreach ($this->$func(TRUE) as $key => $object) {
                    $object->delete($reallyDelete, TRUE);
                }
            }
        }

        # Delete this object itself
        if ($reallyDelete) {
            $obj['conn']->query("delete from $this->table where c_uid = {uid,int}",
                array('uid' => $this->c_uid));
        }
        else {
            $this->setStatus($cfg['status_id']['deleted']);
            $this->update();
        }

    } //}}}

    /* {{{initFromRow
     * Initializes the object from a database resultset.  Normally this will be
     * called from select(), but sometimes you may have a bunch of rows from the
     * database in a resultset and want to make some objects from them.  In that
     * case, this is a fine way to do things.
     *
     * If the value is just numbers, casts it to an integer.
     */
    function initFromRow(&$row) {
        foreach ($this->getDatabaseVars() as $key) {
            $this->$key =
                (preg_match('/^\d+$/', $row[$key]) && strpos($key, "date") < 0)
                ? intval($row[$key])
                : $row[$key];
        }
        $this->GUID = "{$this->table}($row[c_uid])";
    } //}}}

    /* {{{ensureUID
     * Ensures that this object is ready for database operations.  If c_uid is
     * null, anything to do with the database might fail.
     */
    function ensureUID($line, $file) {
        if (!$this->c_uid) {
            trigger_error("Object's c_uid isn't set in class "
                . get_class($this) . " at line $line of file $file", E_USER_ERROR);
        }
    } //}}}

    /* {{{tableToType
     * Given a table name, this method will convert it into the correct typename.
     */
    function tableToType($table) {
        // Basically, delete the [_] off the beginning and turn it into BumpyCaps
        return preg_replace("/_(.)/e", "strtoupper('\\1')", substr($table, strlen("[_]")));
    } //}}}

    /* {{{getVarArray
     * Method to get an object to return an array of its variables, in
     * a form suitable for sending to Template::replace().  The parameter
     * indicates whether this will be displayed in HTML (at present, this only
     * means that newlines will be replaced with <br> tags).  You usually don't
     * need to call this method too much; you can call insertIntoTemplate for
     * most purposes.
     */
    function &getVarArray() {
        $array = array();

        foreach ($this->getDatabaseVars() as $key) {
            $array[strtoupper($key)] = $this->$key;
        }

        # The last-modified timestamp needs to be converted to date-time format
        if ($this->c_last_modified) {
            $lastModified =& new DateTime($this->c_last_modified);
            $array["C_LAST_MODIFIED"]
                    = $lastModified->toString("Y-m-d H:i:s");
        }

        // And the UID, which is too common among all classes and needs to be
        // renamed to avoid frequent clashes in templating situations.
        unset($array["C_UID"]);
        $array[strtoupper(str_replace("[_]", "t_", $this->table))] = $this->c_uid;

        return $array;
    } //}}}

    /* {{{insertIntoTemplate
     * Automagically inserts the object into a template.  See getVarArray
     * to understand how the names of the object's variables will be formed.
     * Basically though, each variable that isn't of a user-defined type will
     * replace a template key of the same name but uppercase, and the c_uid
     * variable will be named the same as the table but uppercase.  In other
     * words, your class Foo that lives in table [_]foo and has a variable named
     * c_bar will replace template keys C_BAR and T_FOO.
     */
    function insertIntoTemplate($templateText) {
        return Template::replace($templateText,
            $this->getVarArray());
    } //}}}

    /* {{{getTable
     *
     */
    function getTable() {
        return $this->table;
    } //}}}


    /* {{{getOwner
     *
     */
    function getOwner() {
        return $this->c_owner;
    } //}}}

    /* {{{setOwner
     *
     */
    function setOwner($value) {
        $this->c_owner = $value;
    } //}}}

    /* {{{setCreator
     *
     */
    function setCreator($value) {
        $this->c_creator = $value;
    } //}}}

    /* {{{getCreator
     *
     */
    function getCreator() {
        return $this->c_creator;
    } //}}}

    /* {{{getGroup
     *
     */
    function getGroup() {
        return $this->c_group;
    } //}}}

    /* {{{setGroup
     *
     */
    function setGroup($value) {
        $this->c_group = $value;
    } //}}}

    /* {{{getLastModified
     *
     */
    function getLastModified() {
        return $this->c_last_modified;
    } //}}}

    /* {{{setLastModified
     * This is not permitted, not even by God.
     */
    function setLastModified($value) {
        trigger_error("Operation setLastModified not permitted in "
                . $this->getClass(), E_USER_ERROR);
    } //}}}

    /* {{{getCreatedDate
     *
     */
    function getCreatedDate() {
        return $this->c_created_date;
    } //}}}

    /* {{{setCreatedDate
     *
     */
    function setCreatedDate($value) {
        $this->c_created_date = date("Y-m-d H:i:s", strtotime($value));
    } //}}}

    /* {{{getStatus
     *
     */
    function getStatus() {
        return $this->c_status;
    } //}}}

    /* {{{setStatus
     *
     */
    function setStatus($value) {
        $this->c_status = $value;
    } //}}}

    /* {{{getFlag
     * Returns bool if the flag bit is set
     * $flag is the name of the flag
     */
    function getFlag($flag) {
        global $cfg;
        return (($cfg['flag'][$flag] & $this->c_flags) != 0 ) ? 1 : 0;
    } //}}}

    /* {{{setFlag
     * Sets the bit to 1 or 0, depending on $value
     * $flag is the name of the flag
     */
    function setFlag($flag, $value) {
        global $cfg;

        if (!isset($cfg['flag'][$flag])) {
            trigger_error("Flag '$flag' isn't defined", E_USER_NOTICE);
        }

        # Watch out for bitwise operations on null values... nothing happens
        if (!$this->c_flags) {
            $this->c_flags = 0;
        }

        $this->c_flags = $value
            ? $this->c_flags | intval($cfg['flag'][$flag])
            : $this->c_flags & (~ intval($cfg['flag'][$flag]));
    } //}}}

    /* {{{getUID
     *
     */
    function getUID() {
        return intval($this->c_uid);
    } //}}}

    /* {{{getUnixperms
     *
     */
    function getUnixperms() {
        return intval($this->c_unixperms);
    } //}}}

    /* {{{getPerm
     * Returns 1 if the permission bit is set.
     * $permName is the *name* of the permission.
     */
    function getPerm($permName) {
        global $cfg;
        return (($cfg['perm'][$permName] & intval($this->c_unixperms)) != 0 ) ? 1 : 0;
    } //}}}

    /** {{{setPerm
     * Sets the named permission bit true or false
     */
    function setPerm($permName, $value) {
        global $cfg;

        if (!isset($cfg['perm'][$permName])) {
            trigger_error("Permission '$permName' isn't defined", E_USER_NOTICE);
        }

        # Watch out for bitwise operations on null values... nothing happens
        if (!$this->c_unixperms) {
            $this->c_unixperms = 0;
        }

        $this->c_unixperms = $value
            ? $this->c_unixperms | $cfg['perm'][$permName]
            : $this->c_unixperms & (~ $cfg['perm'][$permName]);
    } //}}}

    /* {{{equals
     *
     */
    function equals($otherObject) { //boolean
        return (is_object($otherObject)
            && get_class($otherObject) == get_class($this)
            && $otherObject->GUID == $this->GUID);
    } //}}}

    /* {{{toString
     */
    function toString() {
        return $this->getClass() . "($this->c_uid)";
    } //}}}

    /* {{{getDeletionReport
     */
    function &getDeletionReport($cascade) {
        global $obj;
        $result = array();

        # Save a reference to this object to avoid infinite recursion
        if (isset($obj['visited-objects'][$this->GUID])) {
            return $result;
        }
        else {
            $obj['visited-objects'][$this->GUID] = 1;
        }

        $this->ensureUID(__LINE__, __FILE__);

        if ($cascade) {
            # Iterate through the methods that are defined to return the objects
            # that need to be deleted when this object is deleted, and call the
            # method recursively on each (it should be a getFoo() method)
            foreach ($this->cascadeFunctions as $key => $func) {
                foreach ($this->$func(TRUE) as $key => $object) {
                    $result = array_merge($result,
                            $object->getDeletionReport(TRUE));
                }
            }
        }

        $result[] = $this->getClass() . "($this->c_uid)";
        return $result;
    } //}}}

    function initAllowedActions() {
        global $obj;
        global $cfg;
        $this->ensureUID(__LINE__, __FILE__);
        $this->allowedActions = array();
        $cmd =& $obj['conn']->createCommand();
        $cmd->loadQuery("sql/queries/privilege/select-allowed-object-actions.sql");
        $cmd->addParameter("member", $cfg['user']);
        $cmd->addParameter("object", $this->c_uid);
        $cmd->addParameter("table", $this->table);
        $cmd->addParameter("applies_to_object", $cfg['flag']['applies_to_object']);
        $cmd->addParameter("root_group", $cfg['root_uid']);
        foreach ($cfg['perm'] as $name => $bitmask) {
            $cmd->addParameter($name, $bitmask);
        }
        $result =& $cmd->executeReader();
        while ($row = $result->fetchRow()) {
            $this->allowedActions[$row['c_uid']] = $row;
        }
    }

    function &getAllowedActions($refresh = false) {
        if (!isset($this->allowedActions) or $refresh) {
            $this->initAllowedActions();
        }
        return $this->allowedActions;
    }

    function permits(/*int*/ $action) {
        return array_key_exists($action, $this->getAllowedActions());
    }

}
?>
@


1.13
log
@cmd -> comm
@
text
@d20 1
a20 1
 * $Id: DatabaseObject.php,v 1.12 2004/09/20 20:38:38 at Exp $
@


1.12
log
@shortened template function names
@
text
@d20 1
a20 1
 * $Id: DatabaseObject.php,v 1.11 2004/09/20 19:47:28 at Exp $
d583 7
a589 7
        $comm =& $obj['conn']->createCommand();
        $comm->loadQuery("sql/queries/privilege/select-allowed-object-actions.sql");
        $comm->addParameter("member", $cfg['user']);
        $comm->addParameter("object", $this->c_uid);
        $comm->addParameter("table", $this->table);
        $comm->addParameter("applies_to_object", $cfg['flag']['applies_to_object']);
        $comm->addParameter("root_group", $cfg['root_uid']);
d591 1
a591 1
            $comm->addParameter($name, $bitmask);
d593 1
a593 1
        $result =& $comm->executeReader();
@


1.11
log
@migrate away from using DateTime
@
text
@d20 1
a20 1
 * $Id: DatabaseObject.php,v 1.10 2004/09/18 15:22:59 at Exp $
d323 1
a323 1
     * a form suitable for sending to Template::replaceValues().  The parameter
d361 1
a361 1
        return Template::replaceValues($templateText,
@


1.10
log
@remove getTableObject()
@
text
@d20 1
a20 1
 * $Id: DatabaseObject.php,v 1.9 2004/09/18 14:30:05 at Exp $
d24 1
a25 1
include_once("DateTime.php");
d34 1
a34 1
    var $c_created_date = null;     // DateTime
d434 1
a434 1
        return new DateTime($this->c_created_date);
d441 1
a441 1
        $this->c_created_date = $value->toString("Y-m-d H:i:s");
@


1.9
log
@removed tablePermits
@
text
@d20 1
a20 1
 * $Id: DatabaseObject.php,v 1.8 2004/08/24 03:25:30 at Exp $
a40 1
    var $tableObject;               // The object corresponding to the above
a371 10

    /* {{{getTableObject
     * Returns the object's Table object (as opposed to the object's table name)
     */
    function &getTableObject() {
        if (!isset($this->tableObject)) {
            $this->tableObject =& new Table($this->table);
        }
        return $this->tableObject;
    }
@


1.8
log
@privilege stuff moved out of SecurityManager
@
text
@d20 1
a20 1
 * $Id: DatabaseObject.php,v 1.7 2004/08/20 20:33:13 at Exp $
a618 5
    }

    function tablePermits(/*int*/ $action) {
        $table =& $this->getTableObject();
        return $table->permits($action);
@


1.7
log
@various fixes for table-to-type conversion
@
text
@d20 1
a20 1
 * $Id: DatabaseObject.php,v 1.6 2004/08/17 22:22:16 at Exp $
d24 1
d39 3
a41 3
    var $table;                     // The table in the DB that this is stored in
    var $privileges;                // An ARRAY, not an object!!!
    var $implementedActions;        // Array of integers
a302 26
    /* {{{initPrivileges
     */
    function initPrivileges() {
        global $obj;
        $this->ensureUID(__LINE__, __FILE__);
        $this->privileges = array();
        $result =& $obj['conn']->query("select
            c_uid, c_what_granted_to, c_who_granted_to, c_action,
            c_what_relates_to, c_related_table, c_related_uid
            from [_]privilege where
            (c_related_table = '$this->table' and c_related_uid = $this->c_uid)
            or (c_related_table = '$this->table' and c_related_uid = 0)");
        while ($row =& $result->fetchRow()) {
            $this->privileges[$row['c_uid']] = $row;
        }
    } //}}}

    /* {{{getPrivileges
     */
    function &getPrivileges($refresh = FALSE) {
        if (!isset($this->privileges) or $refresh) {
            $this->initPrivileges();
        }
        return $this->privileges;
    } //}}}

d373 11
d589 1
a589 3
    /* {{{getImplementedActions
     */
    function &getImplementedActions() {
d591 34
a624 23
        # Initialize the array if needed
        if (is_null($this->implementedActions)) {
            $this->implementedActions = array();
            $result =& $obj['conn']->query(
                "select ac.c_uid from [_]action as ac "
                . "inner join [_]implemented_action as im on ac.c_uid = im.c_action "
                . "inner join [_]flag as fl on (fl.c_bitmask & ac.c_flags) > 0 "
                . "where (im.c_table = '$this->table' or im.c_table = '') "
                . "and fl.c_title = 'applies_to_object' "
                . "order by c_summary");
            while ($row =& $result->fetchRow(DB_FETCHMODE_ORDERED)) {
                $this->implementedActions[] = $row[0];
            }
        }
        return $this->implementedActions;
    } //}}}

    /* {{{implementsAction
     * $action: int
     */
    function implementsAction($action) {
        return in_array($action, $this->getImplementedActions());
    } //}}}
@


1.6
log
@there is no abortPage()
@
text
@d20 1
a20 1
 * $Id: DatabaseObject.php,v 1.5 2004/07/26 12:31:38 at Exp $
a338 8
    /* {{{typeToTable
     * Given a type, this method will convert it into the correct table name.
     */
    function typeToTable($type) {
        // Turn BumpyCaps into _bumpy_caps and prepend a t
        return "t" .  preg_replace("/([A-Z])/e", "'_' . strtolower('\\1')", $type);
    } //}}}

d344 1
a344 1
        return preg_replace("/_(.)/e", "strtoupper('\\1')", substr($table, 1));
@


1.5
log
@fixed overzealous correction of table-name prefixing
@
text
@d20 1
a20 1
 * $Id: DatabaseObject.php,v 1.4 2004/07/26 02:12:31 at Exp $
d333 2
a334 2
       if (!$this->c_uid) {
           trigger_error("Object's c_uid isn't set in class "
d336 1
a336 2
           Utility::abortPage("This object has no unique identifier.");
       }
@


1.4
log
@added table-name prefixing
@
text
@d20 1
a20 1
 * $Id: DatabaseObject.php,v 1.3 2004/07/26 00:31:43 at Exp $
d381 1
a381 1
        $array[strtoupper(str_replace("[_]", "[_]", $this->table))] = $this->c_uid;
@


1.3
log
@fixes for database table prefixes
@
text
@d20 1
a20 1
 * $Id: DatabaseObject.php,v 1.2 2004/07/20 14:11:06 at Exp $
d381 1
a381 1
        $array[strtoupper(str_replace("[_]", "t_", $this->table))] = $this->c_uid;
@


1.2
log
@put table name prefixes into code
@
text
@d20 1
a20 1
 * $Id: DatabaseObject.php,v 1.1.1.1 2004/05/30 03:10:36 at Exp $
d381 1
a381 1
        $array[strtoupper($this->table)] = $this->c_uid;
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
 * $Id: DatabaseObject.php,v 1.5 2004/05/30 01:41:53 baron Exp $
d311 1
a311 1
            from t_privilege where
d352 1
a352 1
        // Basically, delete the t_ off the beginning and turn it into BumpyCaps
d392 1
a392 1
     * words, your class Foo that lives in table t_foo and has a variable named
d620 3
a622 3
                "select ac.c_uid from t_action as ac "
                . "inner join t_implemented_action as im on ac.c_uid = im.c_action "
                . "inner join t_flag as fl on (fl.c_bitmask & ac.c_flags) > 0 "
@


1.1.1.1
log
@init
@
text
@@
