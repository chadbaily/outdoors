head	1.8;
access;
symbols
	init:1.1.1.1 socialclub:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2004.10.21.20.54.19;	author at;	state dead;
branches;
next	1.7;

1.7
date	2004.10.07.17.41.47;	author at;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.06.14.14.10;	author at;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.09.22.59.21;	author at;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.20.18.17.30;	author at;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.19.15.58.43;	author at;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.20.14.11.06;	author at;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.30.03.10.36;	author at;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.30.03.10.36;	author at;	state Exp;
branches;
next	;


desc
@@


1.8
log
@classes moved to files that match the database table names
@
text
@<?php
/*
 * This file is part of SocialClub (http://socialclub.sourceforge.net)
 * Copyright (C) 2004 Baron Schwartz <baron at sequent dot org>
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307  USA
 * 
 * $Id: EmailList.php,v 1.7 2004/10/07 17:41:47 at Exp $
 *
 * Mailman lists are really stupid with the requirement to have a password.  We
 * auto-generate a random password at subscribe time, then remember it in the DB
 * for unsubscription.  That way the user never needs to know about it.
 */

include_once("DatabaseObject.php");
include_once("Email.php");
include_once("Subscription.php");

class EmailList extends DatabaseObject {
    // {{{declarations
    var $c_title = null;
    var $c_description = null;
    var $c_name = null;
    var $c_password = null;
    var $c_owner_address = null;
    var $c_mgmt_address = null;
    var $c_list_address = null;
    var $c_type = null;
    var $c_subject_prefix = null;
    var $subscriptionRequests;
    var $unsubscriptionRequests;
    // }}}

    /* {{{constructor
     *
     */
    function EmailList() {
        $this->DatabaseObject();
        $this->table = "[_]email_list";
        $this->subscriptionRequests = array();
        $this->unsubscriptionRequests = array();
    } //}}}

    /* {{{isSubscribed
     */
    function isSubscribed(&$member) {
        global $obj;
        $cmd =& $obj['conn']->createCommand();
        $cmd->loadQuery("sql/queries/email_list/check-subscribed.sql");
        $cmd->addParameter("owner", $member->getUID());
        $cmd->addParameter("list", $this->c_uid);
        $cmd->addParameter("email", $member->getEmail());
        return (bool) $cmd->executeScalar();
    } //}}}

    /* {{{subscribe
     */
    function subscribe(&$member) {
        $this->subscriptionRequests[] = $member;
    }

    /* {{{unsubscribe
     */
    function unsubscribe(&$subscription) {
        $this->unsubscriptionRequests[] = $subscription;
    } //}}}

    /* {{{processRequests
     * You need to call this after calling subscribe() or unsubscribe().  This
     * method will take action on those requests, which have been saved.
     */
    function processRequests() {
        $sub = "";
        $unsub = "";
        $body = "";

        switch ($this->c_type) {
        case "MailmanList":
            $unsub = "unsubscribe {C_PASSWORD} address={C_EMAIL}\r\n";
            $sub = "subscribe {C_PASSWORD} address={C_EMAIL}\r\n";
            break;
        default:
            trigger_error("I don't know what to do with "
                . "a $this->c_type mailing list", E_USER_ERROR);
            break;
        }

        # Add the subscription and unsubscription requests
        $email =& new Email();
        foreach ($this->unsubscriptionRequests as $subscription) {
            $body .= $subscription->insertIntoTemplate($unsub);
            $subscription->delete(true);
        }
        foreach ($this->subscriptionRequests as $member) {
            if (!$this->isSubscribed($member)) {
                $password = getRandomString(8);
                $subscription =& new Subscription();
                $subscription->setOwner($member->getUID());
                $subscription->setList($this->c_uid);
                $subscription->setEmail($member->getEmail());
                $subscription->setPassword($password);
                $subscription->insert();
                $body .= $subscription->insertIntoTemplate($sub);
            }
        }

        $email->setBody($body);
        $email->setFrom($this->c_owner_address);
        $email->setSubject($this->getTitle() . " management request");
        $email->addTo($this->c_mgmt_address);
        $email->addBCC($this->c_owner_address);
        $email->addHeader("Reply-To", $this->c_owner_address);
        $email->addHeader("Return-Path", $this->c_owner_address);
        $email->send();
    } //}}}

    /* {{{getTitle
     *
     */
    function getTitle() {
        return $this->c_title;
    } //}}}

    /* {{{setTitle
     *
     */
    function setTitle($value) {
        $this->c_title = $value;
    } //}}}

    /* {{{getDescription
     *
     */
    function getDescription() {
        return $this->c_description;
    } //}}}

    /* {{{setDescription
     *
     */
    function setDescription($value) {
        $this->c_description = $value;
    } //}}}

    /* {{{getName
     *
     */
    function getName() {
        return $this->c_name;
    } //}}}

    /* {{{setName
     *
     */
    function setName($value) {
        $this->c_name = $value;
    } //}}}

    /* {{{getPassword
     *
     */
    function getPassword() {
        return $this->c_password;
    } //}}}

    /* {{{setPassword
     *
     */
    function setPassword($value) {
        $this->c_password = $value;
    } //}}}

    /* {{{getOwnerAddress
     *
     */
    function getOwnerAddress() {
        return $this->c_owner_address;
    } //}}}

    /* {{{setOwnerAddress
     *
     */
    function setOwnerAddress($value) {
        $this->c_owner_address = $value;
    } //}}}

    /* {{{getMgmtAddress
     *
     */
    function getMgmtAddress() {
        return $this->c_mgmt_address;
    } //}}}

    /* {{{setMgmtAddress
     *
     */
    function setMgmtAddress($value) {
        $this->c_mgmt_address = $value;
    } //}}}

    /* {{{getListAddress
     *
     */
    function getListAddress() {
        return $this->c_list_address;
    } //}}}

    /* {{{setListAddress
     *
     */
    function setListAddress($value) {
        $this->c_list_address = $value;
    } //}}}

    /* {{{getType
     *
     */
    function getType() {
        return $this->c_type;
    } //}}}

    /* {{{setType
     *
     */
    function setType($value) {
        $this->c_type = $value;
    } //}}}

    /* {{{getSubjectPrefix
     *
     */
    function getSubjectPrefix() {
        return $this->c_subject_prefix;
    } //}}}

    /* {{{setSubjectPrefix
     *
     */
    function setSubjectPrefix($value) {
        $this->c_subject_prefix = $value;
    } //}}}

}
?>
@


1.7
log
@get rid of utility/Utility.php
@
text
@d20 1
a20 1
 * $Id: EmailList.php,v 1.6 2004/10/06 14:14:10 at Exp $
@


1.6
log
@cmd -> comm
@
text
@d20 1
a20 1
 * $Id: EmailList.php,v 1.5 2004/09/09 22:59:21 at Exp $
d108 1
a108 1
                $password = Utility::getRandomString(8);
@


1.5
log
@subscriptions can now be batched and done all at once
@
text
@d20 1
a20 1
 * $Id: EmailList.php,v 1.4 2004/08/20 18:17:30 at Exp $
d60 6
a65 6
        $comm =& $obj['conn']->createCommand();
        $comm->loadQuery("sql/queries/email_list/check-subscribed.sql");
        $comm->addParameter("owner", $member->getUID());
        $comm->addParameter("list", $this->c_uid);
        $comm->addParameter("email", $member->getEmail());
        return (bool) $comm->executeScalar();
@


1.4
log
@tweaked for frickin MailMan
@
text
@d20 1
a20 1
 * $Id: EmailList.php,v 1.3 2004/08/19 15:58:43 at Exp $
d42 2
d52 2
d71 2
a72 29
        # Check if the person is already subscribed
        if (!$this->isSubscribed($member)) {
            $password = Utility::getRandomString(8);
            $email =& new Email();
            switch ($this->c_type) {
            case "MailmanList":
                $email->setBody("subscribe $password address="
                    .  $member->getEmail());
                break;
            default:
                trigger_error("I don't know what to do to subscribe someone to "
                    . "a $this->c_type mailing list", E_USER_ERROR);
                break;
            }
            $email->setFrom($this->c_owner_address);
            $email->setSubject($this->getTitle() . " email list subscription");
            $email->addTo($this->c_mgmt_address);
            $email->addBCC($this->c_owner_address);
            $email->addHeader("Reply-To", $this->c_owner_address);
            $email->addHeader("Return-Path", $this->c_owner_address);
            $email->send();
            $subscription =& new Subscription();
            $subscription->setOwner($member->getUID());
            $subscription->setList($this->c_uid);
            $subscription->setEmail($member->getEmail());
            $subscription->setPassword($password);
            $subscription->insert();
        }
    } //}}}
d77 12
a88 1
        $email =& new Email();
d91 2
a92 2
            $email->setBody("unsubscribe " . $subscription->getPassword()
                . " address=" . $subscription->getEmail());
d95 1
a95 1
            trigger_error("I don't know what to do to unsubscribe someone from "
d99 21
d121 1
a121 1
        $email->setSubject($this->getTitle() . " unsubscription request");
@


1.3
log
@susbscribe member when activating membership
@
text
@d20 1
a20 1
 * $Id: EmailList.php,v 1.2 2004/07/20 14:11:06 at Exp $
d82 1
a82 1
            $email->setSubject("Subscribe to " .  $this->getTitle());
d86 1
d112 1
a112 1
        $email->setSubject("Unsubscribe from " .  $this->getTitle());
d116 1
@


1.2
log
@put table name prefixes into code
@
text
@d20 1
a20 1
 * $Id: EmailList.php,v 1.1.1.1 2004/05/30 03:10:36 at Exp $
d52 12
d67 26
a92 11
        $password = Utility::getRandomString(8);
        $email =& new Email();
        switch ($this->c_type) {
        case "MailmanList":
            $email->setBody("subscribe $password address="
                .  $member->getEmail());
            break;
        default:
            trigger_error("I don't know what to do to subscribe someone to "
                . "a $this->c_type mailing list", E_USER_ERROR);
            break;
a93 12
        $email->setFrom($this->c_owner_address);
        $email->setSubject("Subscribe to " .  $this->getTitle());
        $email->addTo($this->c_mgmt_address);
        $email->addBCC($this->c_owner_address);
        $email->addHeader("Reply-To", $this->c_owner_address);
        $email->send();
        $subscription =& new Subscription();
        $subscription->setOwner($member->getUID());
        $subscription->setList($this->c_uid);
        $subscription->setEmail($member->getEmail());
        $subscription->setPassword($password);
        $subscription->insert();
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
 * $Id: EmailList.php,v 1.2 2004/05/30 03:08:37 baron Exp $
d49 1
a49 1
        $this->table = "t_email_list";
@


1.1.1.1
log
@init
@
text
@@
