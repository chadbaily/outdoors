head	1.3;
access;
symbols
	init:1.1.1.1 socialclub:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2004.07.25.20.47.26;	author at;	state dead;
branches;
next	1.2;

1.2
date	2004.07.20.14.22.35;	author at;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.30.03.10.35;	author at;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.30.03.10.35;	author at;	state Exp;
branches;
next	;


desc
@@


1.3
log
@moved to authorize/
@
text
@<?php
/*
 * This file is part of SocialClub (http://socialclub.sourceforge.net)
 * Copyright (C) 2004 Baron Schwartz <baron at sequent dot org>
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307  USA
 * 
 * $Id: authorize-optional.php,v 1.2 2004/07/20 14:22:35 at Exp $
 */
# If the 'user' cookie exists, we can use that.  Test to see if this user is in
# the database, but only if there is NOT any HTTP auth data:
if (isset($_COOKIE['user']) && $_COOKIE['user']
        && !isset($_SERVER['PHP_AUTH_USER'])
        && !isset($_SERVER['PHP_AUTH_PW'])) {
    $result =& $obj['conn']->query("select * from [_]member where c_uid = {uid,int}",
        array('uid' => $_COOKIE['user']));
    if ($result->numRows()) {
        # We're good to go.
        $obj['user'] =& new Member();
        $obj['user']->initFromRow($result->fetchRow());
        $cfg['user'] = $obj['user']->getUID();
        return;
    }
}

# If the browser sent HTTP auth info, we can authenticate against the database.
# The user may have already been authenticated on a previous request, and if so
# his browser will re-send the HTTP username (email address) and password every
# time.
if (isset($_SERVER['PHP_AUTH_USER']) && isset($_SERVER['PHP_AUTH_PW'])) {
    $result = $obj['conn']->query("select * from [_]member "
        . "where c_password = {password,char,30} and c_email = {username,char,60}",
        array('username' => $_SERVER['PHP_AUTH_USER'],
            'password' => $_SERVER['PHP_AUTH_PW']));
    # If there are any rows, the email address exists in the database and the
    # user knows the right password.
    if ($result->numRows()) {
        $obj['user'] =& new Member();
        $obj['user']->initFromRow($result->fetchRow());
        $cfg['user'] = $obj['user']->getUID();
        return;
    }
}

# If there's still no $cfg['user'], we don't care.

?>
@


1.2
log
@put table name prefixes into code
@
text
@d20 1
a20 1
 * $Id: authorize-optional.php,v 1.1.1.1 2004/05/30 03:10:35 at Exp $
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
 * $Id: authorize-optional.php,v 1.3 2004/05/30 01:41:58 baron Exp $
d27 1
a27 1
    $result =& $obj['conn']->query("select * from t_member where c_uid = {uid,int}",
d43 1
a43 1
    $result = $obj['conn']->query("select * from t_member "
@


1.1.1.1
log
@init
@
text
@@
