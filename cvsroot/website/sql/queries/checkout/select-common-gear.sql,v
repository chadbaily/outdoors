head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2005.01.30.21.55.33;	author at;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.30.20.48.40;	author at;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.18.13.44.04;	author at;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.18.03.52.33;	author at;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.14.15.08.49;	author at;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove spurious semicolons
@
text
@-- Update the checkout quantities
replace into [_]checkout_gear_qty (c_type, c_qty)
    select ty.c_uid, sum(cg.c_qty)
    from [_]item_type as ty
        left outer join [_]checkout_gear as cg
            on ty.c_uid = cg.c_type
            and cg.c_status = {checked_out,int}
            and cg.c_deleted <> 1
    group by ty.c_uid
-- DIVIDER
replace into [_]checkout_item_qty (c_type, c_qty, c_qty_out)
    select ty.c_uid,
    sum(case when (it.c_status = {missing,int}) then 0 else it.c_qty end),
    sum(case when (it.c_status = {checked_out,int}) then it.c_qty else 0 end)
    from [_]item_type as ty
        left outer join [_]item as it
            on it.c_type = ty.c_uid
            and it.c_deleted <> 1
    group by ty.c_uid
-- DIVIDER
select
    ty.c_uid,
    ic.c_title as ic_title,
    ty.c_title as ty_title,
    ciq.c_qty - ciq.c_qty_out - cgq.c_qty as available,
    count(*) as num
from [_]item_type as ty
    inner join [_]item_category as ic on ic.c_uid = ty.c_category
    inner join [_]checkout_gear as cg on cg.c_type = ty.c_uid
    inner join [_]checkout as co on co.c_uid = cg.c_checkout
    inner join [_]checkout_gear_qty as cgq on cgq.c_type = ty.c_uid
    inner join [_]checkout_item_qty as ciq on ciq.c_type = ty.c_uid
where co.c_activity = {activity,int}
    and ic.c_deleted <> 1
    and cg.c_deleted <> 1
    and co.c_deleted <> 1
    and co.c_deleted <> 1
group by ic.c_uid, ic.c_title, ty.c_uid, ty.c_title
order by num desc
@


1.4
log
@add c_deleted column to database tables
@
text
@d9 1
a9 1
    group by ty.c_uid;
d19 1
a19 1
    group by ty.c_uid;
@


1.3
log
@change columns to signed integers to avoid overflows when quantities go negative
@
text
@d8 1
d18 1
d34 4
@


1.2
log
@bug 203: display quantity in-stock when checking out gear
@
text
@d23 1
a23 3
    cast(max(ciq.c_qty)
        - max(ciq.c_qty_out)
        - max(cgq.c_qty) as signed) as available,
@


1.1
log
@initial release of checkin/checkout system
@
text
@d1 18
d20 1
a20 1
    it.c_uid,
d22 4
a25 1
    it.c_title as it_title,
d27 6
a32 4
from [_]checkout as co
    inner join [_]checkout_gear as cg on cg.c_checkout = co.c_uid
    left outer join [_]item_type as it on it.c_uid = cg.c_type
    left outer join [_]item_category as ic on ic.c_uid = it.c_category
d34 1
a34 1
group by ic_title, it_title
@

