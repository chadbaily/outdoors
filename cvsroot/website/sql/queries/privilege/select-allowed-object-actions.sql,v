head	1.8;
access;
symbols;
locks; strict;
comment	@# @;


1.8
date	2005.01.30.21.55.33;	author at;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.30.20.59.15;	author at;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.30.20.48.42;	author at;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.08.20.20.33;	author at;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.24.15.06.22;	author at;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.23.14.40.18;	author at;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.22.23.03.38;	author at;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.22.22.51.14;	author at;	state Exp;
branches;
next	;


desc
@@


1.8
log
@remove spurious semicolons
@
text
@-- Selects a list of all actions that the member is allowed to do on the object.
-- Takes into account both the UNIX style bitmasked privileges and the ACL
-- privileges that are stored in [_]privilege.
-- Parameters:
--      member: The UID of the member
--      object: The UID of the object
--      table:  The table the object lives in.  This parameter appears in both
--              char and none data types.
--      applies_to_object: flag
--      root_group: The UID of the root group
--      All of the various bitmasks from [_]unixperm.
select ac.*
    -- You could add columns to the select statement to show what granted the
    -- privilege, for instance group_owner.c_uid would show if the member is in
    -- the group that owns the object.
from
    [_]action as ac
    -- join onto the object itself
    inner join {table,none} as obj on obj.c_uid = {object,int}
    -- Filter out actions that do not apply to this object type
    inner join [_]implemented_action as ia
        on ia.c_action = ac.c_uid
            and (ia.c_table = {table,char} or ia.c_table = '')
    -- Privileges that apply to the object (or every object in the table)
    -- and grant the given action
    left outer join [_]privilege as pr
        on pr.c_related_table = {table,char}
            and pr.c_deleted <> 1
            and pr.c_action = ac.c_uid
            and (
                (pr.c_what_relates_to = 'object' and pr.c_related_uid = {object,int})
                or pr.c_what_relates_to = 'global'
                or (pr.c_what_relates_to = 'self' and {object,int} = {member,int} and {table,char} = '[_]member'))
    -- Groups that the member belongs to, which may be null if he doesn't belong
    -- to any
    left outer join [_]member_group as mg on mg.c_member = {member,int}
        and mg.c_deleted <> 1
    -- If this is not null, the member belongs to the group that owns the object
    left outer join [_]member_group as group_owner
        on group_owner.c_related_group = obj.c_group
        and group_owner.c_member = {member,int}
        and group_owner.c_deleted <> 1
where
    -- The action must apply to objects
    (ac.c_flags & {applies_to_object,int} <> 0)
    and obj.c_deleted <> 1
    and (
        -- Members of the 'root' group are always allowed to do everything
        mg.c_related_group = {root_group,int}
        -- UNIX style read permissions in the bit field
        or (ac.c_title = 'read' and (
            -- The other_read flag is on
            (obj.c_unixperms & {other_read,int} <> 0)
            -- The owner_read flag is on, and the member is the owner
            or ((obj.c_unixperms & {owner_read,int} <> 0) and obj.c_owner = {member,int})
            -- The group_read flag is on, and the member is in the group
            or ((obj.c_unixperms & {group_read,int} <> 0) and group_owner.c_uid is not null)))
        -- UNIX style write permissions in the bit field
        or (ac.c_title = 'write' and (
            -- The other_write flag is on
            (obj.c_unixperms & {other_write,int} <> 0)
            -- The owner_write flag is on, and the member is the owner
            or ((obj.c_unixperms & {owner_write,int} <> 0) and obj.c_owner = {member,int})
            -- The group_write flag is on, and the member is in the group
            or ((obj.c_unixperms & {group_write,int} <> 0) and group_owner.c_uid is not null)))
        -- UNIX style delete permissions in the bit field
        or (ac.c_title = 'delete' and (
            -- The other_delete flag is on
            (obj.c_unixperms & {other_delete,int} <> 0)
            -- The owner_delete flag is on, and the member is the owner
            or ((obj.c_unixperms & {owner_delete,int} <> 0) and obj.c_owner = {member,int})
            -- The group_delete flag is on, and the member is in the group
            or ((obj.c_unixperms & {group_delete,int} <> 0) and group_owner.c_uid is not null)))
        -- user privileges
        or (pr.c_what_granted_to = 'user' and pr.c_who_granted_to = {member,int})
        -- owner privileges
        or (pr.c_what_granted_to = 'owner' and obj.c_owner = {member,int})
        -- owner_group privileges
        or (pr.c_what_granted_to = 'owner_group' and group_owner.c_uid is not null)
        -- group privileges
        or (pr.c_what_granted_to = 'group' and pr.c_who_granted_to = mg.c_related_group))
order by ac.c_summary
@


1.7
log
@fix invalid table name because it was aliased
@
text
@d82 1
a82 1
order by ac.c_summary;
@


1.6
log
@add c_deleted column to database tables
@
text
@d46 1
a46 1
    and {table,none}.c_deleted <> 1
@


1.5
log
@add 'self' privileges.
@
text
@d28 1
d37 1
d42 1
d45 3
a47 1
    (ac.c_flags & {applies_to_object,int} <> 0) and (
@


1.4
log
@fixed invalid condition: joining onto [_]member_group's c_group instead of c_related_group.  Bah...
@
text
@d29 4
a32 2
            and ((pr.c_what_relates_to = 'object' and pr.c_related_uid = {object,int})
                or pr.c_what_relates_to = 'global')
@


1.3
log
@use correct table prefix names and use a left join on the privileges table
@
text
@d74 1
a74 1
        or (pr.c_who_granted_to = mg.c_group))
@


1.2
log
@parameterized the query
@
text
@d12 1
a12 2
select
    ac.c_uid, ac.c_title, ac.c_summary
d17 1
a17 1
    t_action as ac
d21 1
a21 1
    inner join t_implemented_action as ia
d26 1
a26 1
    inner join t_privilege as pr
d33 1
a33 1
    left outer join t_member_group as mg on mg.c_member = {member,int}
d35 1
a35 1
    left outer join t_member_group as group_owner
d74 2
a75 1
        or (pr.c_who_granted_to = mg.c_group));
@


1.1
log
@initial version, with parameters hardcoded
@
text
@d1 11
d13 1
a13 1
    ac.c_uid, ac.c_title
d20 1
a20 1
    inner join t_adventure as ad on ad.c_uid = 170
d24 1
a24 1
            and (ia.c_table = 't_adventure' or ia.c_table = '')
d28 1
a28 1
        on pr.c_related_table = 't_adventure'
d30 1
a30 1
            and ((pr.c_what_relates_to = 'object' and pr.c_related_uid = 170)
d34 1
a34 1
    left outer join t_member_group as mg on mg.c_member = 2
d37 2
a38 2
        on group_owner.c_related_group = ad.c_group
        and group_owner.c_member = 2
d41 1
a41 1
    (ac.c_flags & 256 <> 0) and (
d43 1
a43 1
        mg.c_related_group = 1
d47 1
a47 1
            (ad.c_unixperms & 4 <> 0)
d49 1
a49 1
            or ((ad.c_unixperms & 256 <> 0) and ad.c_owner = 2)
d51 1
a51 1
            or ((ad.c_unixperms & 32 <> 0) and group_owner.c_uid is not null)))
d55 1
a55 1
            (ad.c_unixperms & 2 <> 0)
d57 1
a57 1
            or ((ad.c_unixperms & 128 <> 0) and ad.c_owner = 2)
d59 1
a59 1
            or ((ad.c_unixperms & 16 <> 0) and group_owner.c_uid is not null)))
d63 1
a63 1
            (ad.c_unixperms & 1 <> 0)
d65 1
a65 1
            or ((ad.c_unixperms & 64 <> 0) and ad.c_owner = 2)
d67 1
a67 1
            or ((ad.c_unixperms & 8 <> 0) and group_owner.c_uid is not null)))
d69 1
a69 1
        or (pr.c_what_granted_to = 'user' and pr.c_who_granted_to = 2)
d71 1
a71 1
        or (pr.c_what_granted_to = 'owner' and ad.c_owner = 2)
@

