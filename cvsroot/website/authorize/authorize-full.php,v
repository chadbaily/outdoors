head	1.9;
access;
symbols;
locks; strict;
comment	@# @;


1.9
date	2005.02.08.14.41.03;	author at;	state Exp;
branches;
next	1.8;

1.8
date	2005.02.07.18.45.57;	author at;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.30.21.16.40;	author at;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.28.15.21.08;	author at;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.07.02.49.28;	author at;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.07.17.41.47;	author at;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.16.22.00.49;	author at;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.30.02.28.11;	author at;	state Exp;
branches;
next	1.1;

1.1
date	2004.07.25.20.35.37;	author at;	state Exp;
branches;
next	;


desc
@@


1.9
log
@fix redirects
@
text
@<?php
/*
 * This file is part of SocialClub (http://socialclub.sourceforge.net)
 * Copyright (C) 2004 Baron Schwartz <baron at sequent dot org>
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307  USA
 * 
 * $Id: authorize-full.php,v 1.8 2005/02/07 18:45:57 at Exp $
 */

# If the browser sent auth, we can authenticate against the database.  The user
# may have already been authenticated on a previous request, and if so the browser
# will re-send the auth every time.  Auth is trivially encoded to make it
# non-obvious.

if ($cfg['auth']['user'] && $cfg['auth']['pass']) {
    $cmd =& $obj['conn']->createCommand();
    $cmd->loadQuery("sql/queries/misc/login-full.sql");
    $cmd->addParameter("email", $cfg['auth']['user']);
    $cmd->addParameter("password", $cfg['auth']['pass']);
    $result =& $cmd->executeReader();

    # If there are any rows, the email address exists in the database.
    if ($result->numRows()) {

        $row = $result->fetchRow();
        if ($row['password_correct']) {
        	# We now know for sure what the user's ID is!
            $cfg['user'] = $row['c_uid'];

            # Set the auth cookie.  It may get unset later
            # but that's ok.  We need it if we're going to do any redirects.
            setcookie("auth", base64_encode(serialize($cfg['auth'])), null, "/");

            # We need to check that the user has an active membership, and if
            # not the user can't access this page. We check for various special
            # cases and redirect as needed.
            #
            # a) The user has no memberships and needs to go to the
            #    renew page.
            if (!$row['total']) {
                redirect("$cfg[base_url]/members/join/renew");
            }
            # b) The user has no valid memberships (memberships that are
            #    active, the begin date is before now and the end date is
            #    after now)
            if (!$row['valid']) {
                # There are two cases: the user has expired memberships and
                # needs to renew, or the member has an inactive, pending
                # membership and needs to wait for activation.
                if ($row['pending']) {
                    redirect("$cfg[base_url]/members/join/inactive");
                }
                elseif ($row['expired']) {
                    redirect("$cfg[base_url]/members/join/renew");
                }
                else {
                    # If we got here, we have a real problem: something's
                    # wrong with the query or something.
                    trigger_error("There's a problem deciding what to do "
                        . "with this user", E_USER_ERROR);
                    $cfg['login_exists'] = false;
                    $cfg['user'] = 0;
                }
            }
        }
        else {
            $cfg['login_password'] = false;
        }
        $cfg['db_server_time'] = $row['current_timestamp'];
    }
    else {
        $cfg['login_exists'] = false;
    }
}

# If there's still no $cfg['user'], we need to get the user to enter an email
# address and password.
if (!$cfg['user']) {
    $cfg['login_status'] = false;
}
# If we got here, we have identified the user's c_uid.
else {
    $obj['user'] =& new Member();
    $obj['user']->select($cfg['user']);
    $cfg['login_status'] = true;
}

?>
@


1.8
log
@friendlyurls and set cookie at root level
@
text
@d20 1
a20 1
 * $Id: authorize-full.php,v 1.7 2005/01/30 21:16:40 at Exp $
d54 1
a54 1
                redirect("members/join/renew");
d64 1
a64 1
                    redirect("members/join/inactive");
d67 1
a67 1
                    redirect("members/join/renew");
@


1.7
log
@fix to force login, even though it's not clear that this is what's needed
@
text
@d20 1
a20 1
 * $Id: authorize-full.php,v 1.6 2004/12/28 15:21:08 at Exp $
d45 1
a45 1
            setcookie("auth", base64_encode(serialize($cfg['auth'])));
d54 1
a54 1
                redirect("members.php?page=join&action=renew");
d64 1
a64 1
                    redirect("members.php?page=join&action=inactive");
d67 1
a67 1
                    redirect("members.php?page=join&action=renew");
@


1.6
log
@check DB server for time differences and abort if there is > 30 sec difference
@
text
@d20 1
a20 1
 * $Id: authorize-full.php,v 1.5 2004/11/07 02:49:28 at Exp $
d74 2
@


1.5
log
@add session-tracking to website
@
text
@d20 1
a20 1
 * $Id: authorize-full.php,v 1.4 2004/10/07 17:41:47 at Exp $
d80 1
@


1.4
log
@get rid of utility/Utility.php
@
text
@d20 1
a20 1
 * $Id: authorize-full.php,v 1.3 2004/08/16 22:00:49 at Exp $
d22 4
a25 4
# If the browser sent auth cookies, we can authenticate against the database.
# The user may have already been authenticated on a previous request, and if so
# his browser will re-send the username (email address) and password every
# time.  Username and password cookies are base64 encoded to make them trivially
d28 1
a28 6
if (isset($_COOKIE['PHP_AUTH_USER']) && isset($_COOKIE['PHP_AUTH_PW'])) {
    $cfg['PHP_AUTH_USER'] = base64_decode($_COOKIE['PHP_AUTH_USER']);
    $cfg['PHP_AUTH_PW'] = base64_decode($_COOKIE['PHP_AUTH_PW']);
}

if (isset($cfg['PHP_AUTH_USER']) && isset($cfg['PHP_AUTH_PW'])) {
d31 2
a32 2
    $cmd->addParameter("email", $cfg['PHP_AUTH_USER']);
    $cmd->addParameter("password", $cfg['PHP_AUTH_PW']);
d43 3
a45 4
            # Set the username and password cookies.  They may get unset later
            # but that's ok.  We need them if we're going to do any redirects.
            setcookie("PHP_AUTH_USER", base64_encode($cfg['PHP_AUTH_USER']));
            setcookie("PHP_AUTH_PW", base64_encode($cfg['PHP_AUTH_PW']));
@


1.3
log
@set cookies before redirecting on login; check cookies when doing a partial auth
@
text
@d20 1
a20 1
 * $Id: authorize-full.php,v 1.2 2004/07/30 02:28:11 at Exp $
d60 1
a60 1
                Utility::redirect("members.php?page=join&action=renew");
d70 1
a70 1
                    Utility::redirect("members.php?page=join&action=inactive");
d73 1
a73 1
                    Utility::redirect("members.php?page=join&action=renew");
@


1.2
log
@added the ability to display error messages when someone's login fails.
@
text
@d20 1
a20 1
 * $Id: authorize-full.php,v 1.1 2004/07/25 20:35:37 at Exp $
d47 5
@


1.1
log
@moved from misc/
@
text
@d20 1
a20 1
 * $Id: authorize-full.php,v 1.1.1.1 2004/05/30 03:10:35 at Exp $
d41 1
a41 1
    if ($result->numRows()) {  
d78 6
@

