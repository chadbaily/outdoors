head	1.5;
access;
symbols
	init:1.1.1.1 socialclub:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2004.10.07.17.41.48;	author at;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.20.20.38.40;	author at;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.09.22.59.21;	author at;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.08.22.45.37;	author at;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.30.03.10.35;	author at;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.30.03.10.35;	author at;	state Exp;
branches;
next	;


desc
@@


1.5
log
@get rid of utility/Utility.php
@
text
@<?php
/*
 * This file is part of SocialClub (http://socialclub.sourceforge.net)
 * Copyright (C) 2004 Baron Schwartz <baron at sequent dot org>
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307  USA
 * 
 * $Id: subscribe.php,v 1.4 2004/09/20 20:38:40 at Exp $
 */

$template = file_get_contents("templates/email_list/subscribe.php");

$error = false;

# Ensure that the member is not already subscribed to this email list with the
# same email address as s/he currently has
$cmd =& $obj['conn']->createCommand();
$cmd->loadQuery("sql/queries/email_list/check-subscribed.sql");
$cmd->addParameter("owner", $cfg['user']);
$cmd->addParameter("list", $cfg['object']);
$cmd->addParameter("email", $obj['user']->getEmail());
if ($cmd->executeScalar() > 0) {
    $template = Template::unhide($template, "ALREADY");
    $error = true;
}

if (getval('continue') && !$error) {
    $object->subscribe($obj['user']);
    $object->processRequests();
    $template = Template::unhide($template, "SUCCESS");
}
elseif (!$error) {
    $template = Template::unhide($template, "CONFIRM");
}

$res['content'] = $object->insertIntoTemplate($template);
$res['title'] = "Subscribe to Email List";

?>
@


1.4
log
@shortened template function names
@
text
@d20 1
a20 1
 * $Id: subscribe.php,v 1.3 2004/09/09 22:59:21 at Exp $
d39 1
a39 1
if (Utility::getval('continue') && !$error) {
@


1.3
log
@subscriptions can now be batched and done all at once
@
text
@d20 1
a20 1
 * $Id: subscribe.php,v 1.2 2004/09/08 22:45:37 at Exp $
d35 1
a35 1
    $template = Template::unhideBlock($template, "ALREADY");
d42 1
a42 1
    $template = Template::unhideBlock($template, "SUCCESS");
d45 1
a45 1
    $template = Template::unhideBlock($template, "CONFIRM");
@


1.2
log
@new navbar and tabbed-box scheme; coalesced templates
@
text
@d20 1
a20 1
 * $Id: subscribe.php,v 1.1.1.1 2004/05/30 03:10:35 at Exp $
d41 1
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
 * $Id: subscribe.php,v 1.1 2004/05/30 03:09:39 baron Exp $
d23 1
a23 2
$wrapper = file_get_contents("templates/email_list/subscribe-wrapper.php");
$box = file_get_contents("templates/email_list/subscribe-box.php");
d35 1
a35 1
    $box = Template::unhideBlock($box, "ALREADY");
d41 1
a41 1
    $box = Template::unhideBlock($box, "SUCCESS");
d44 1
a44 1
    $box = Template::unhideBlock($box, "CONFIRM");
d47 1
a47 5
# Plug it all into the templates
$res['content'] = $object->insertIntoTemplate($box);
include_once("tabbed-boxes/generic-read.php");
$res['content'] = Template::replaceValues($wrapper, array(
    "BOX" => $res['content']));
@


1.1.1.1
log
@init
@
text
@@
