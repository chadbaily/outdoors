head	1.7;
access;
symbols;
locks; strict;
comment	@# @;


1.7
date	2004.10.23.12.56.20;	author at;	state dead;
branches;
next	1.6;

1.6
date	2004.10.07.17.41.50;	author at;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.06.17.52.39;	author at;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.24.17.53.44;	author at;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.24.17.39.46;	author at;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.20.20.38.40;	author at;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.19.02.48.34;	author at;	state Exp;
branches;
next	;


desc
@@


1.7
log
@edit_attributes -> edit_features
@
text
@<?php
/*
 * This file is part of SocialClub (http://socialclub.sourceforge.net)
 * Copyright (C) 2004 Baron Schwartz <baron at sequent dot org>
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307  USA
 * 
 * $Id: edit_attributes.php,v 1.6 2004/10/07 17:41:50 at Exp $
 */

include_once("ItemTypeAttribute.php");

# Create templates
$template = file_get_contents("templates/item_type/edit_attributes.php");

# Add a form to the page so the user can add an attribute
$form =& new XmlForm("forms/item_type_attribute/create.xml");
$form->snatch();
$form->validate();
if ($form->isValid()) {
    // Add a new attribute to the object
    $attr =& new ItemTypeAttribute();
    $attr->setType($cfg['object']);
    $attr->setName($form->getValue("name"));
    $attr->insert();
}

$template = Template::replace($template,
    array("FORM" => $form->toString()));

# Delete attributes if necessary
if (postval("delete")) {
    $attr =& new ItemTypeAttribute();
    $attr->select(postval("delete"));
    $attr->delete(true);
    # Delete the attributes from all the items of this type, too
    $cmd =& $obj['conn']->createCommand();
    $cmd->loadQuery("sql/queries/item_attribute/delete-by-item-type.sql");
    $cmd->addParameter("item_type", $cfg['object']);
    $cmd->addParameter("attr_name", $attr->getName());
    $cmd->executeNonQuery();
}

# Add all the existing attributes to the template
foreach ($object->getAttributes() as $attr) {
    $template = Template::block($template, "ATTR", array(
        "C_NAME" => $attr->getName(),
        "C_UID" => $attr->getUID(),
        "CLASS" => ($attr->getUID() == $object->getPrimaryFeature())
            ? " style='font-weight:bold'"
            : ""));
}

$res['content'] = $object->insertIntoTemplate($template);
$res['title'] = "Edit Features for " . $object->getTitle();

?>
@


1.6
log
@get rid of utility/Utility.php
@
text
@d20 1
a20 1
 * $Id: edit_attributes.php,v 1.5 2004/10/06 17:52:39 at Exp $
@


1.5
log
@comm -> cmd
@
text
@d20 1
a20 1
 * $Id: edit_attributes.php,v 1.4 2004/09/24 17:53:44 at Exp $
d44 1
a44 1
if (Utility::postval("delete")) {
d46 1
a46 1
    $attr->select(Utility::postval("delete"));
@


1.4
log
@terminology: change attribute to feature
@
text
@d20 1
a20 1
 * $Id: edit_attributes.php,v 1.3 2004/09/24 17:39:46 at Exp $
d49 5
a53 5
    $comm =& $obj['conn']->createCommand();
    $comm->loadQuery("sql/queries/item_attribute/delete-by-item-type.sql");
    $comm->addParameter("item_type", $cfg['object']);
    $comm->addParameter("attr_name", $attr->getName());
    $comm->executeNonQuery();
@


1.3
log
@rebuild item system, making most things 'features' of items; no hardcoded title and description
@
text
@d20 1
a20 1
 * $Id: edit_attributes.php,v 1.2 2004/09/20 20:38:40 at Exp $
d67 1
a67 1
$res['title'] = "Edit Attributes for " . $object->getTitle();
@


1.2
log
@shortened template function names
@
text
@d20 1
a20 1
 * $Id: edit_attributes.php,v 1.1 2004/09/19 02:48:34 at Exp $
d60 4
a63 1
        "C_UID" => $attr->getUID()));
@


1.1
log
@init
@
text
@d20 1
a20 1
 * $Id: read.php,v 1.3 2004/09/08 22:45:37 at Exp $
d40 1
a40 1
$template = Template::replaceValues($template,
d58 1
a58 1
    $template = Template::replaceWithinBlock($template, "ATTR", array(
@

