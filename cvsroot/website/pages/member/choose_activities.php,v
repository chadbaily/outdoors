head	1.8;
access;
symbols
	init:1.1.1.1 socialclub:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2005.02.01.15.27.52;	author at;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.30.20.48.40;	author at;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.23.12.57.41;	author at;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.07.17.41.50;	author at;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.20.20.38.40;	author at;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.08.22.45.37;	author at;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.20.14.21.23;	author at;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.30.03.10.35;	author at;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.30.03.10.35;	author at;	state Exp;
branches;
next	;


desc
@@


1.8
log
@table prefix
@
text
@<?php
/*
 * This file is part of SocialClub (http://socialclub.sourceforge.net)
 * Copyright (C) 2004 Baron Schwartz <baron at sequent dot org>
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307  USA
 * 
 * $Id: choose_activities.php,v 1.7 2005/01/30 20:48:40 at Exp $
 */

$template = file_get_contents("templates/member/choose_activities.php");

# Get a list of all activities
$activities = array();
$cmd =& $obj['conn']->createCommand();
$cmd->loadQuery("sql/queries/generic-select.sql");
$cmd->addParameter("table", "[_]activity");
$cmd->addParameter("orderby", "c_title");
$result =& $cmd->executeReader();
while ($row =& $result->fetchRow()) {
    $activities[$row['c_uid']] =& array_change_key_case($row, 1);
}

# Get a list of the interests and re-key them by ACTIVITY not by the c_uid
$interests = array();
foreach ($object->getChildren("interest", "c_member") as $key => $interest) {
    # Don't assign by reference -- subtle chaos ensues.
    $interests[$interest->getActivity()] = $interest;
}

# Get an array of checkboxes that the user checked
$checkboxes = postval('activities');
$posted = postval('posted');

if ($posted && !is_array($checkboxes)) {
    $checkboxes = array();
}

# Whether any modifications were made
$dirty = false;

foreach (array_keys($activities) as $key) {
    # We'll check the checkbox if the interest exists...
    $checked = array_key_exists($key, $interests);
    # If the member is already interested, and the form is submitted but the
    # checkbox isn't checked, delete the interest
    if ($checked && $posted && !in_array($key, $checkboxes)) {
        $interests[$key]->delete(TRUE);
        $dirty = TRUE;
        $checked = false;
    }
    # If the member isn't already interested, and the form is submitted and
    # the  checkbox is checked, add the interest
    elseif (!array_key_exists($key, $interests)
        && $posted
        && in_array($key, $checkboxes))
    {
        $interest =& new interest();
        $interest->setMember($cfg['object']);
        $interest->setActivity($key);
        $interest->insert();
        $dirty = TRUE;
        $checked = true;
    }
    # Plug the info into the template row...
    $template = Template::block($template, "INTEREST",
        $activities[$key]
        + array("CHECKED" => ($checked ? "checked" : "")));
}

if ($dirty) {
    # Say that the interests were updated.
    $template = Template::unhide($template, "SUCCESS");
}

# Plug it all into the templates
$res['content'] = $object->insertIntoTemplate($template);
$res['title'] = "Choose Activities";


?>
@


1.7
log
@add c_deleted column to database tables
@
text
@d20 1
a20 1
 * $Id: choose_activities.php,v 1.6 2004/10/23 12:57:41 at Exp $
d29 1
a29 1
$cmd->addParameter("table", "activity");
@


1.6
log
@change class names to match table names, use getChildren()
@
text
@d20 1
a20 1
 * $Id: choose_activities.php,v 1.5 2004/10/07 17:41:50 at Exp $
d27 5
a31 1
$result =& $obj['conn']->query("select * from [_]activity order by c_title");
@


1.5
log
@get rid of utility/Utility.php
@
text
@d20 1
a20 1
 * $Id: choose_activities.php,v 1.4 2004/09/20 20:38:40 at Exp $
d34 1
a34 1
foreach ($object->getInterests() as $key => $interest) {
d66 1
a66 1
        $interest =& new Interest();
@


1.4
log
@shortened template function names
@
text
@d20 1
a20 1
 * $Id: choose_activities.php,v 1.3 2004/09/08 22:45:37 at Exp $
d40 2
a41 2
$checkboxes = Utility::postval('activities');
$posted = Utility::postval('posted');
@


1.3
log
@new navbar and tabbed-box scheme; coalesced templates
@
text
@d20 1
a20 1
 * $Id: choose_activities.php,v 1.2 2004/07/20 14:21:23 at Exp $
d74 1
a74 1
    $template = Template::replaceWithinBlock($template, "INTEREST",
d81 1
a81 1
    $template = Template::unhideBlock($template, "SUCCESS");
@


1.2
log
@put table name prefixes into code
@
text
@d20 1
a20 1
 * $Id: choose_activities.php,v 1.1.1.1 2004/05/30 03:10:35 at Exp $
d23 2
a46 4
# Create templates
$wrapper = file_get_contents("templates/member/choose_activities-wrapper.php");
$box = file_get_contents("templates/member/choose_activities-box.php");

d74 1
a74 1
    $box = Template::replaceWithinBlock($box, "INTEREST",
d81 1
a81 1
    $box = Template::unhideBlock($box, "SUCCESS");
d85 1
a85 5
$res['tab'] = "";
$res['content'] = $box;
include_once("tabbed-boxes/member-read.php");
$res['content'] = Template::replaceValues($wrapper, array(
    "BOX" => $res['content'],));
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
 * $Id: choose_activities.php,v 1.5 2004/05/30 01:42:17 baron Exp $
d25 1
a25 1
$result =& $obj['conn']->query("select * from t_activity order by c_title");
@


1.1.1.1
log
@init
@
text
@@
