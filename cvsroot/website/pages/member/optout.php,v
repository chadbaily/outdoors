head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2005.01.31.13.29.57;	author at;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.30.20.48.40;	author at;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.03.20.17.19;	author at;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.23.12.57.41;	author at;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.09.21.14.34;	author at;	state Exp;
branches;
next	;


desc
@@


1.5
log
@add table name prefix
@
text
@<?php
/*
 * This file is part of SocialClub (http://socialclub.sourceforge.net)
 * Copyright (C) 2004 Baron Schwartz <baron at sequent dot org>
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307  USA
 * 
 * $Id: optout.php,v 1.4 2005/01/30 20:48:40 at Exp $
 */

$template = file_get_contents("templates/member/optout.php");

# Get a list of all activity categories
$cats = array();
$cmd =& $obj['conn']->createCommand();
$cmd->loadQuery("sql/queries/generic-select.sql");
$cmd->addParameter("table", "[_]activity_category ");
$cmd->addParameter("orderby", "c_uid");
$result =& $cmd->executeReader();
while ($row =& $result->fetchRow()) {
    $cats[$row['c_uid']] =& $row;
}

# Get a list of the opts and re-key them by CATEGORY not by the c_uid
$opts = array();
foreach ($object->getChildren("optout", "c_member") as $key => $opt) {
    # Don't assign by reference -- subtle chaos ensues.
    $opts[$opt->getCategory()] = $opt;
}

# Get an array of checkboxes that the user checked
$checkboxes = postval('cats');
$posted = postval('posted');

if ($posted && !is_array($checkboxes)) {
    $checkboxes = array();
}

# Whether any modifications were made
$dirty = false;

foreach (array_keys($cats) as $key) {
    # We'll check the checkbox if the optout does not exist (the member wants to
    # get emails).
    $exists = array_key_exists($key, $opts);
    # If the member is already opted out, and the form is submitted and the
    # checkbox is checked, delete the optout
    if ($exists && $posted && in_array($key, $checkboxes)) {
        $opts[$key]->delete(TRUE);
        $dirty = TRUE;
        $exists = false;
    }
    # If the member isn't already opted out, and the form is submitted and
    # the  checkbox is unchecked, add the optout 
    elseif (!$exists
        && $posted
        && !in_array($key, $checkboxes))
    {
        $opt =& new optout();
        $opt->setMember($cfg['object']);
        $opt->setCategory($key);
        $opt->insert();
        $dirty = TRUE;
        $exists = true;
    }
    # Plug the info into the template row...
    $template = Template::block($template, "optout",
        $cats[$key]
        + array("CHECKED" => (!$exists ? "checked" : "")));
}

if ($dirty) {
    # Say that the opts were updated.
    $template = Template::unhide($template, "SUCCESS");
}

# Plug it all into the templates
$res['content'] = $object->insertIntoTemplate($template);
$res['title'] = "Opt Out of Emails";


?>
@


1.4
log
@add c_deleted column to database tables
@
text
@d20 1
a20 1
 * $Id: optout.php,v 1.3 2004/11/03 20:17:19 at Exp $
d29 1
a29 1
$cmd->addParameter("table", "activity_category ");
@


1.3
log
@complement so checked checkboxes mean you WILL get that type of email
@
text
@d20 1
a20 1
 * $Id: optout.php,v 1.2 2004/10/23 12:57:41 at Exp $
d27 5
a31 1
$result =& $obj['conn']->query("select * from [_]activity_category order by c_uid");
@


1.2
log
@change class names to match table names, use getChildren()
@
text
@d20 1
a20 1
 * $Id: optout.php,v 1.1 2004/10/09 21:14:34 at Exp $
d51 6
a56 5
    # We'll check the checkbox if the opt exists...
    $checked = array_key_exists($key, $opts);
    # If the member is already opted out, and the form is submitted but the 
    # checkbox isn't checked, delete the optout
    if ($checked && $posted && !in_array($key, $checkboxes)) {
d59 1
a59 1
        $checked = false;
d62 2
a63 2
    # the  checkbox is checked, add the optout 
    elseif (!array_key_exists($key, $opts)
d65 1
a65 1
        && in_array($key, $checkboxes))
d72 1
a72 1
        $checked = true;
d77 1
a77 1
        + array("CHECKED" => ($checked ? "checked" : "")));
@


1.1
log
@release email system
@
text
@d20 1
a20 1
 * $Id: optout.php,v 1.5 2004/10/07 17:41:50 at Exp $
d34 1
a34 1
foreach ($object->getOptouts() as $key => $opt) {
d66 1
a66 1
        $opt =& new Optout();
@

