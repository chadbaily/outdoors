head	1.25;
access;
symbols;
locks; strict;
comment	@# @;


1.25
date	2005.02.07.18.49.28;	author at;	state Exp;
branches;
next	1.24;

1.24
date	2005.01.16.17.16.47;	author at;	state Exp;
branches;
next	1.23;

1.23
date	2005.01.16.17.05.15;	author at;	state Exp;
branches;
next	1.22;

1.22
date	2005.01.16.16.59.52;	author at;	state Exp;
branches;
next	1.21;

1.21
date	2005.01.16.02.12.42;	author at;	state Exp;
branches;
next	1.20;

1.20
date	2005.01.15.04.51.26;	author at;	state Exp;
branches;
next	1.19;

1.19
date	2004.10.24.17.02.50;	author at;	state Exp;
branches;
next	1.18;

1.18
date	2004.10.23.12.56.02;	author at;	state Exp;
branches;
next	1.17;

1.17
date	2004.10.08.19.36.31;	author at;	state Exp;
branches;
next	1.16;

1.16
date	2004.10.06.17.40.40;	author at;	state Exp;
branches;
next	1.15;

1.15
date	2004.10.06.17.35.44;	author at;	state Exp;
branches;
next	1.14;

1.14
date	2004.10.06.02.20.01;	author at;	state Exp;
branches;
next	1.13;

1.13
date	2004.10.04.19.56.02;	author at;	state Exp;
branches;
next	1.12;

1.12
date	2004.10.04.18.29.02;	author at;	state Exp;
branches;
next	1.11;

1.11
date	2004.10.04.16.07.11;	author at;	state Exp;
branches;
next	1.10;

1.10
date	2004.10.04.12.59.19;	author at;	state Exp;
branches;
next	1.9;

1.9
date	2004.10.03.23.24.54;	author at;	state Exp;
branches;
next	1.8;

1.8
date	2004.10.03.22.49.56;	author at;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.03.21.34.31;	author at;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.02.19.34.10;	author at;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.02.19.25.03;	author at;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.01.17.53.11;	author at;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.22.21.56.11;	author at;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.20.20.38.40;	author at;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.19.02.48.34;	author at;	state Exp;
branches;
next	;


desc
@@


1.25
log
@friendlyurls
@
text
@<?php
/*
 * This file is part of SocialClub (http://socialclub.sourceforge.net)
 * Copyright (C) 2004 Baron Schwartz <baron at sequent dot org>
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307  USA
 * 
 * $Id: list_all.php,v 1.24 2005/01/16 17:16:47 at Exp $
 */

$res['title'] = "List All Items";
$template = file_get_contents("templates/item/list_all.php");

# #############################################################################
# These parameters come from the GET variables, but they are used to set values
# in the form later, which is how they persist across pages.
# #############################################################################
$crit = array(
    "count" => 30,
    "category" => 0,
    "type" => 0,
    "status" => 0,
    "sort" => "ID",
    # This is never assigned to.
    "defaultSort" => "ID",
    "numRows" => 1,
    "numPages" => 1,
    "thisPage" => 1);

if (isset($_GET['count']) && $_GET['count']) {
    $crit['count'] = max(10, min(100, intval($_GET['count'])));
}
if (isset($_GET['category']) && $_GET['category']) {
    $crit['category'] = intval($_GET['category']);
}
if (isset($_GET['status']) && $_GET['status']) {
    $crit['status'] = intval($_GET['status']);
}
if (isset($_GET['type']) && $_GET['type']) {
    $crit['type'] = intval($_GET['type']);
}
if (isset($_GET['offset']) && $_GET['offset']) {
    $crit['thisPage'] = max(1, intval($_GET["offset"]));
}
if (isset($_GET['sort']) && $_GET['sort']) {
    $crit['sort'] = $_GET["sort"];
}
# These sort columns are common to both types of display
$otherSortCols = array("ID", "qty", "condition", "status");

# #############################################################################
# Create the form.
# #############################################################################
# Create the filter for category, type, and status
$formTemplate = file_get_contents("forms/item/list_all.xml");
$cmd =& $obj['conn']->createCommand();
$cmd->loadQuery("sql/queries/generic-select.sql");
$cmd->addParameter("table", "[_]item_category");
$cmd->addParameter("orderby", "c_title");
$result =& $cmd->executeReader();
while ($row =& $result->fetchRow()) {
    $formTemplate = Template::block($formTemplate, "CAT",
        array_change_key_case($row, 1));
}

$cmd =& $obj['conn']->createCommand();
$cmd->loadQuery("sql/queries/item_type/select-by-category.sql");
if (isset($_GET['category']) && $_GET['category']) {
    $cmd->addParameter("cat", intval($_GET['category']));
}
$result =& $cmd->executeReader();
$thisCat = "";
$groupTemplate = Template::extract($formTemplate, "GROUP");
$formTemplate = Template::delete($formTemplate, "GROUP");
$thisGroup = "";
while ($row =& $result->fetchRow()) {
    if ($thisCat != $row['cat_title']) {
        $thisCat = $row['cat_title'];
        $formTemplate = Template::replace($formTemplate, array(
            "TYPES" => $thisGroup), 1);
        $thisGroup = Template::replace($groupTemplate, array(
            "CAT_TITLE" => $row['cat_title']));
    }
    $thisGroup = Template::block($thisGroup, "TYPE",
        array_change_key_case($row, 1));
}
$formTemplate = Template::replace($formTemplate, array(
    "TYPES" => $thisGroup), 1);

# ############################################################################
# Leave the rest of the form for later.  Right now, query for items.
# ############################################################################
if (!$crit["type"]) {

    # Add the appropriate sort columns to the menu.
    $sortCols = array("type", "details1", "details2");
    foreach ($sortCols as $col) {
        $formTemplate = Template::block($formTemplate, "sort",
            array("title" => $col));
    }
    if (!in_array($crit['sort'], $sortCols) &&
            !in_array($crit['sort'], $otherSortCols))
    {
        $crit['sort'] = $crit['defaultSort'];
    }

    # Figure out how many results there are total.
    $cmd =& $obj['conn']->createCommand();
    $cmd->loadQuery("sql/queries/item/count.sql");
    if ($crit['category']) {
        $cmd->addParameter("cat", $crit['category']);
    }
    if ($crit['status']) {
        $cmd->addParameter("status", $crit['status']);
    }
    $crit['numRows'] = $cmd->executeScalar();
    if ($crit['numRows'] <= ($crit['thisPage'] - 1) * $crit['count']) {
        $crit['thisPage'] = 1;
    }

    # Retrieve the results that we're going to display.
    $cmd =& $obj['conn']->createCommand();
    $cmd->loadQuery("sql/queries/item/list_all.sql");
    $cmd->addParameter("offset", ($crit['thisPage'] - 1) * $crit['count']);
    $cmd->addParameter("limit", $crit['count']);
    $cmd->addParameter("orderby", $crit['sort']);
    if ($crit['category']) {
        $cmd->addParameter("cat", $crit['category']);
    }
    if ($crit['status']) {
        $cmd->addParameter("status", $crit['status']);
    }
    $result =& $cmd->executeReader();
    if ($result->numRows()) {
        $template = Template::unhide($template, "GENERIC");
        $template = Template::delete($template, "BY_TYPE");
    }

}
else {

    # Figure out how many results there are total.
    $cmd =& $obj['conn']->createCommand();
    $cmd->loadQuery("sql/queries/item/count.sql");
    $cmd->addParameter("type", $crit['type']);
    if ($crit['status']) {
        $cmd->addParameter("status", $crit['status']);
    }
    $crit['numRows'] = $cmd->executeScalar();
    if ($crit['numRows'] <= ($crit['thisPage'] - 1) * $crit['count']) {
        $crit['thisPage'] = 1;
    }

    # The list should be filtered by type.  This requires building a custom
    # query and template.  Get the attributes that belong to the item type as a
    # guide for this process.
    $queryTemplate = file_get_contents("sql/queries/item/list_all-by-type.sql");
    $type =& new item_type();
    $type->select($crit['type']);
    $res['title'] = "List All Items: " . $type->getTitle();
    $sortExists = false;
    foreach ($type->getChildren("item_type_feature") as $key => $iat) {
        $colName = $iat->getName();
        # Plug into the query template
        $queryTemplate = Template::block($queryTemplate,
            array("join", "select"),
            array("c_name" => $colName));
        # Plug into the page template
        $template = Template::block($template,
            array("header", "bodyrow"),
            array("c_name" => $colName));
        # Plug into the sort options
        $formTemplate = Template::block($formTemplate, "sort",
            array("col" => $colName, "title" => $colName));
        if ($crit['sort'] == $colName) {
            $sortExists = true;
        }
    }
    $queryTemplate = Template::delete($queryTemplate, "join");
    $queryTemplate = Template::delete($queryTemplate, "select");

    if (!$sortExists && !in_array($crit['sort'], $otherSortCols)) {
        $crit['sort'] = $crit['defaultSort'];
    }

    # Exec the query.
    $cmd =& $obj['conn']->createCommand();
    $cmd->setCommandText($queryTemplate);
    $cmd->addParameter("itemtype", $crit['type']);
    $cmd->addParameter("orderby", $crit['sort'] . "_table");
    $cmd->addParameter("offset", ($crit['thisPage'] - 1) * $crit['count']);
    $cmd->addParameter("limit", $crit['count']);
    if ($crit['status']) {
        $cmd->addParameter("status", $crit['status']);
    }
    $result =& $cmd->executeReader();

    if ($result->numRows()) {
        $template = Template::unhide($template, "BY_TYPE");
    }
    $template = Template::delete($template, "GENERIC");
}

# ########################################################################
# Plug the results into the page.
# ########################################################################

if ($result->numRows()) {
    while ($row =& $result->fetchRow()) {
        $template = Template::block($template, "item", $row);
    }
}
else {
    $template = Template::unhide($template, "NONE");
}

# ########################################################################
# Finish building the form.
# ########################################################################

# Add some sort columns to the form
foreach ($otherSortCols as $col) {
    $formTemplate = Template::block($formTemplate, "sort",
        array("title" => $col));
}

# Create the "page X of Y" menu
$crit['numPages'] = ceil($crit['numRows'] / $crit['count']);
for ($i = 1; $i <= $crit['numPages']; ++$i) {
    $formTemplate = Template::block($formTemplate, "offset", array(
        "page" => $i, "pages" => $crit['numPages']));
}

# Insert statuses into the status menu
foreach (array("checked_out", "checked_in", "missing", "deleted") as $stat) {
    $formTemplate = Template::block($formTemplate, "status",
        array("c_title" => $stat, "c_uid" => $cfg['status_id'][$stat]));
}

# Create the form from the template
$form =& new XmlForm(Template::finalize($formTemplate), true);
$form->setValue("status", $cfg['status_id']['checked_in']);
$form->setValue("sort", $crit['sort']);
$form->snatch();
if (!is_numeric($form->getValue("count"))) {
    $form->setValue("count", $crit['count']);
}

$template = Template::replace($template, array(
    "FORM" => $form->toString(),
    "SORT_COL" => $crit['sort']));

# Auto-link to items when they are in the format "item XYZ"
$replacement = "<a href=\"members/item/read/\\1\">\\0</a>";
$template = preg_replace("/item (\d+)/", $replacement, $template);

$res['content'] = Template::replace($template, array("NUM_ROWS" => $crit['numRows']));

?>
@


1.24
log
@fix bug 207: doesn't sort by details1 and details2
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.23 2005/01/16 17:05:15 at Exp $
d266 1
a266 3
$replacement = "<a href=\"members.php?page=item"
    . "&action={$cfg['action_id']['read']}"
    . "&object=\\1\">\\0</a>";
@


1.23
log
@fix bug 193: display sort column on the page
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.22 2005/01/16 16:59:52 at Exp $
d57 1
a57 1
if (isset($_GET['sort']) && preg_match("/^[a-z_\.]+$/", $_GET['sort'])) {
a115 1
        echo $crit['sort'];
@


1.22
log
@fix bug 194: show appropriate sort options in menu
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.21 2005/01/16 02:12:42 at Exp $
d262 3
a264 1
$template = Template::replace($template, array("FORM" => $form->toString()));
@


1.21
log
@fix the status selection menu
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.20 2005/01/15 04:51:26 at Exp $
d31 1
a31 1
    "count" => 50,
d35 3
a37 1
    "sort" => "c_uid",
d60 2
d108 2
a109 6
    $sortCols = array(
        "co_title" => "Condition",
        "ty_title" => "Type",
        "c_primary" => "Details 1",
        "c_secondary" => "Details 2");
    foreach ($sortCols as $col => $title) {
d111 1
a111 1
            array("col" => $col, "title" => $title));
d113 5
a117 2
    if (!array_key_exists($crit['sort'], $sortCols)) {
        $crit['sort'] = "c_uid";
d195 2
a196 2
    if (!$sortExists) {
        $crit['sort'] = "c_uid";
d234 6
d256 1
@


1.20
log
@fixed problems with sorting, count not persisting, and other problems with item/list_all
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.19 2004/10/24 17:02:50 at Exp $
d236 6
@


1.19
log
@add an option to choose how many to view per page
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.18 2004/10/23 12:56:02 at Exp $
d26 36
a62 1

a73 6
foreach (array("checked_in", "checked_out", "missing") as $status) {
    $formTemplate = Template::block($formTemplate, "STATUS", array(
        "C_TITLE" => $status,
        "C_UID" => $cfg['status_id'][$status]));
}

d98 17
a114 24
# Create the form
$form =& new XmlForm(Template::finalize($formTemplate), true);
$form->setValue("status", $cfg['status_id']['checked_in']);
$form->snatch();
if (!is_numeric($form->getValue("count"))) {
    $form->setValue("count", "50");
}
$template = Template::replace($template, array("FORM" => $form->toString()));

# Figure out the sort column.  It must be only lowercase letters, underscores,
# and dots.
$sortCol = "c_uid";
if (isset($_GET['sort']) && preg_match("/^[a-z_\.]+$/", $_GET['sort'])) {
    $sortCol = $_GET['sort'];
}

$template = Template::replace($template, array("SORT_COL" => $sortCol));

if (!$form->getValue("type")) {
    # Page through the records 50 at a time.
    $num = $form->getValue("count");
    $offset = 1;
    if (isset($_GET['offset'])) {
        $offset = max(1, intval($_GET['offset']));
d117 1
d120 2
a121 2
    if ($form->getValue('category')) {
        $cmd->addParameter("cat", $form->getValue('category'));
d123 2
a124 2
    if ($form->getValue('status')) {
        $cmd->addParameter("status", $form->getValue('status'));
d126 3
a128 11
    $numResults = $cmd->executeScalar();
    $template = Template::replace($template, array(
        "NUM_ROWS" => $numResults,
        "NUM_PAGES" => ceil($numResults / $num),
        "SORT" => $sortCol,
        "THIS_PAGE" => $offset));

    # Create the "page X of Y" display
    for ($i = 1; $i <= ceil($numResults / $num); ++$i) {
        $template = Template::block($template, "PAGETHRU", array(
            "OFFSET" => $i));
d131 1
a131 1
    # Do the real query
d134 5
a138 5
    $cmd->addParameter("offset", ($offset - 1) * $num);
    $cmd->addParameter("limit", $num);
    $cmd->addParameter("orderby", $sortCol);
    if ($form->getValue('category')) {
        $cmd->addParameter("cat", $form->getValue('category'));
d140 2
a141 2
    if ($form->getValue('status')) {
        $cmd->addParameter("status", $form->getValue('status'));
a144 4
        $template = Template::replace($template, array(
            "CAT" => $form->getValue("category"),
            "STAT" => $form->getValue("status"),
            "ITEM_TYPE" => $form->getValue("type")));
d148 1
d151 13
d169 1
a169 1
    $type->select($form->getValue("type"));
d171 1
d173 1
d176 2
a177 2
            array("JOIN", "SELECT"),
            array("C_NAME" => $iat->getName()));
d180 14
a193 2
            array("HEADER", "BODYROW"),
            array("C_NAME" => $iat->getName()));
a194 6
    $queryTemplate = Template::delete($queryTemplate, "JOIN");
    $queryTemplate = Template::delete($queryTemplate, "SELECT");
    $template = Template::delete($template, "GENERIC");
    $template = Template::replace($template, array(
        "CAT" => $form->getValue("category"),
        "ITEM_TYPE" => $form->getValue("type")));
d199 6
a204 4
    $cmd->addParameter("itemtype", $form->getValue("type"));
    $cmd->addParameter("orderby", $sortCol . "_table");
    if ($form->getValue('status')) {
        $cmd->addParameter("status", $form->getValue('status'));
d207 1
a209 2
        $template = Template::replace($template,
            array("NUM_ROWS" => $result->numRows()));
d211 1
d214 3
d220 1
a220 2
        $template = Template::block($template, "ITEM",
            array_change_key_case($row, 1));
d227 21
d254 1
a254 1
$res['content'] = $template;
@


1.18
log
@edit_attributes -> edit_features, change class names to match table names
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.17 2004/10/08 19:36:31 at Exp $
d73 3
d89 1
a89 1
    $num = 50;
@


1.17
log
@fixed filtering by status
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.16 2004/10/06 17:40:40 at Exp $
d140 1
a140 1
    $type =& new ItemType();
d143 1
a143 1
    foreach ($type->getAttributes() as $key => $iat) {
@


1.16
log
@reorder status options
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.15 2004/10/06 17:35:44 at Exp $
d71 1
d97 3
d129 1
@


1.15
log
@add a filter by status
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.14 2004/10/06 02:20:01 at Exp $
d39 1
a39 1
foreach (array("checked_in", "missing", "checked_out") as $status) {
d69 1
a69 2
# Done creating the filter. Create it as a form now.

@


1.14
log
@auto-link to other items
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.13 2004/10/04 19:56:02 at Exp $
d26 2
a27 1
# Plug in choices for filtering by category and type
d38 7
d69 2
d119 3
d161 3
@


1.13
log
@fix ordering in query
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.12 2004/10/04 18:29:02 at Exp $
d28 5
a32 5
$comm =& $obj['conn']->createCommand();
$comm->loadQuery("sql/queries/generic-select.sql");
$comm->addParameter("table", "[_]item_category");
$comm->addParameter("orderby", "c_title");
$result =& $comm->executeReader();
d37 2
a38 2
$comm =& $obj['conn']->createCommand();
$comm->loadQuery("sql/queries/item_type/select-by-category.sql");
d40 1
a40 1
    $comm->addParameter("cat", intval($_GET['category']));
d42 1
a42 1
$result =& $comm->executeReader();
d144 5
a148 5
    $comm =& $obj['conn']->createCommand();
    $comm->setCommandText($queryTemplate);
    $comm->addParameter("itemtype", $form->getValue("type"));
    $comm->addParameter("orderby", $sortCol . "_table");
    $result =& $comm->executeReader();
d166 6
@


1.12
log
@define variable before using it
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.11 2004/10/04 16:07:11 at Exp $
d147 1
a147 1
    $cmd->addParameter("orderby", $sortCol . "_table");
@


1.11
log
@group options by type in select menu
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.10 2004/10/04 12:59:19 at Exp $
d46 1
@


1.10
log
@actually sort by c_uid when no sort column specified
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.9 2004/10/03 23:24:54 at Exp $
d43 3
d47 8
a54 1
    $formTemplate = Template::block($formTemplate, "TYPE",
d57 2
@


1.9
log
@populate types menu even when category is not set
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.8 2004/10/03 22:49:56 at Exp $
d92 1
a92 3
    if ($sortCol) {
        $cmd->addParameter("orderby", $sortCol);
    }
d134 1
a134 3
    if (isset($_GET['sort']) && $_GET['sort']) {
        $comm->addParameter("orderby", $_GET['sort'] . "_table");
    }
@


1.8
log
@organize item types by category
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.7 2004/10/03 21:34:31 at Exp $
d39 1
a39 1
if (isset($_GET['category'])) {
d61 1
a61 1
if (!$form->getValue('type')) {
d113 1
a113 1
    $type->select($form->getValue('type'));
@


1.7
log
@add the ability to page through records
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.6 2004/10/02 19:34:10 at Exp $
d26 1
a26 1
# Plug in choices for filtering by type
d30 1
a30 1
$comm->addParameter("table", "[_]item_type");
d34 10
d47 1
d71 3
d95 3
d100 3
d128 3
a130 2
    $template = Template::replace($template,
        array("ITEM_TYPE" => $form->getValue("type")));
@


1.6
log
@added #results to the page
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.5 2004/10/02 19:25:03 at Exp $
d43 1
a43 1
$sortCol = "";
d51 23
d76 2
d121 2
a127 2
    $template = Template::replace($template,
        array("NUM_ROWS" => $result->numRows()));
@


1.5
log
@add item type to title when filtered
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.4 2004/10/01 17:53:11 at Exp $
d101 2
@


1.4
log
@add filtering by type
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.3 2004/09/22 21:56:11 at Exp $
d23 1
d69 1
a110 1
$res['title'] = "List All Items";
@


1.3
log
@add columns, make sortable
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.2 2004/09/20 20:38:40 at Exp $
d25 15
d49 1
a49 1
if (!isset($_GET['type'])) {
d58 1
d61 36
@


1.2
log
@shortened template function names
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.1 2004/09/19 02:48:34 at Exp $
d25 6
a30 5
$cmd =& $obj['conn']->createCommand();
$cmd->loadQuery("sql/queries/generic-select.sql");
$cmd->addParameter("table", "[_]item");
$cmd->addParameter("orderby", "c_type");
$result =& $cmd->executeReader();
d32 22
a53 3
while ($row =& $result->fetchRow()) {
    $template = Template::block($template, "ITEM",
        array_change_key_case($row, 1));
@


1.1
log
@init
@
text
@d20 1
a20 1
 * $Id: list_all.php,v 1.5 2004/09/08 22:45:37 at Exp $
d32 1
a32 1
    $template = Template::replaceWithinBlock($template, "ITEM",
@

