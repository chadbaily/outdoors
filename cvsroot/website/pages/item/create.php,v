head	1.13;
access;
symbols;
locks; strict;
comment	@# @;


1.13
date	2005.02.08.14.41.03;	author at;	state Exp;
branches;
next	1.12;

1.12
date	2005.02.07.18.49.28;	author at;	state Exp;
branches;
next	1.11;

1.11
date	2005.01.16.14.33.38;	author at;	state Exp;
branches;
next	1.10;

1.10
date	2004.10.23.12.56.02;	author at;	state Exp;
branches;
next	1.9;

1.9
date	2004.10.07.17.41.48;	author at;	state Exp;
branches;
next	1.8;

1.8
date	2004.10.06.13.56.03;	author at;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.04.18.27.09;	author at;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.02.02.09.33;	author at;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.24.17.39.46;	author at;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.20.22.10.32;	author at;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.20.20.38.40;	author at;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.20.20.31.40;	author at;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.19.02.48.34;	author at;	state Exp;
branches;
next	;


desc
@@


1.13
log
@fix redirects
@
text
@<?php
/*
 * This file is part of SocialClub (http://socialclub.sourceforge.net)
 * Copyright (C) 2004 Baron Schwartz <baron at sequent dot org>
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307  USA
 * 
 * $Id: create.php,v 1.12 2005/02/07 18:49:28 at Exp $
 */

# Create templates
$template = file_get_contents("templates/item/create.php");

# Create the form and populate the condition, status, and type menu
$formTemplate = file_get_contents("forms/item/create.xml");

$cmd =& $obj['conn']->createCommand();
$cmd->loadQuery("sql/queries/item_type/select-by-category.sql");
$result =& $cmd->executeReader();
$thisCat = "";
$groupTemplate = Template::extract($formTemplate, "GROUP");
$formTemplate = Template::delete($formTemplate, "GROUP");
$thisGroup = "";
while ($row =& $result->fetchRow()) {
    if ($thisCat != $row['cat_title']) {
        $thisCat = $row['cat_title'];
        $formTemplate = Template::replace($formTemplate, array(
            "TYPES" => $thisGroup), 1);
        $thisGroup = Template::replace($groupTemplate, array(
            "CAT_TITLE" => $row['cat_title']));
    }
    $thisGroup = Template::block($thisGroup, "TYPE",
        array_change_key_case($row, 1));
}
$formTemplate = Template::replace($formTemplate, array(
    "TYPES" => $thisGroup), 1);

foreach (array("checked_out", "checked_in", "missing") as $status) {
    $formTemplate = Template::block($formTemplate, "STATUS", array(
        "C_TITLE" => $status,
        "C_UID" => $cfg['status_id'][$status]));
}

$cmd =& $obj['conn']->createCommand();
$cmd->loadQuery("sql/queries/generic-select.sql");
$cmd->addParameter("table", "[_]condition");
$cmd->addParameter("orderby", "c_uid");
$result =& $cmd->executeReader();
while ($row =& $result->fetchRow()) {
    $formTemplate = Template::block($formTemplate, "OPTION",
        array_change_key_case($row, 1));
}

$form =& new XMLForm(Template::finalize($formTemplate), true);
$form->snatch();
$form->validate();

if ($form->isValid()) {
    $object =& new item();
    $object->setDescription($form->getValue("description"));
    $object->setPurchaseDate($form->getValue("purchase-date"));
    $object->setCondition($form->getValue("condition"));
    $object->setStatus($form->getValue("status"));
    $object->setType($form->getValue("type"));
    $object->setQty($form->getValue("qty"));
    $object->insert();
    redirect("$cfg[base_url]/members/item/edit_features/$object->c_uid");
}
else {
    # Plug the form into the template
    $res['content'] = Template::replace($template, array(
        "FORM" => $form->toString()));

}

$res['title'] = "Create a New Item";

?>
@


1.12
log
@friendlyurls
@
text
@d20 1
a20 1
 * $Id: create.php,v 1.11 2005/01/16 14:33:38 at Exp $
d79 1
a79 1
    redirect("members/item/edit_features/$object->c_uid");
@


1.11
log
@upgrade to track inventory quantities (bug 189)
@
text
@d20 1
a20 1
 * $Id: create.php,v 1.10 2004/10/23 12:56:02 at Exp $
d79 1
a79 2
    redirect("members.php?page=item&action={$cfg['action_id']['edit_features']}"
        . "&object=$object->c_uid");
@


1.10
log
@edit_attributes -> edit_features, change class names to match table names
@
text
@d20 1
a20 1
 * $Id: create.php,v 1.9 2004/10/07 17:41:48 at Exp $
d77 1
@


1.9
log
@get rid of utility/Utility.php
@
text
@d20 1
a20 1
 * $Id: create.php,v 1.8 2004/10/06 13:56:03 at Exp $
d71 1
a71 1
    $object =& new Item();
d78 1
a78 1
    redirect("members.php?page=item&action={$cfg['action_id']['edit_attributes']}"
@


1.8
log
@integrate the status field into the inventory system, instead of using the condition field for everything
@
text
@d20 1
a20 1
 * $Id: create.php,v 1.7 2004/10/04 18:27:09 at Exp $
d78 1
a78 1
    Utility::redirect("members.php?page=item&action={$cfg['action_id']['edit_attributes']}"
@


1.7
log
@add option groups to pulldown menu when creating an item
@
text
@d20 1
a20 1
 * $Id: create.php,v 1.6 2004/10/02 02:09:33 at Exp $
d26 1
a26 1
# Create the form and populate the condition and type menu
d29 3
a31 3
$comm =& $obj['conn']->createCommand();
$comm->loadQuery("sql/queries/item_type/select-by-category.sql");
$result =& $comm->executeReader();
d50 6
d75 1
@


1.6
log
@set the description when creating the item
@
text
@d20 1
a20 1
 * $Id: create.php,v 1.5 2004/09/24 17:39:46 at Exp $
d29 7
a35 5
$cmd =& $obj['conn']->createCommand();
$cmd->loadQuery("sql/queries/generic-select.sql");
$cmd->addParameter("table", "[_]item_type");
$cmd->addParameter("orderby", "c_title");
$result =& $cmd->executeReader();
d37 8
a44 1
    $formTemplate = Template::block($formTemplate, "TYPE",
d47 2
@


1.5
log
@rebuild item system, making most things 'features' of items; no hardcoded title and description
@
text
@d20 1
a20 1
 * $Id: create.php,v 1.4 2004/09/20 22:10:32 at Exp $
d55 1
@


1.4
log
@redirect to the edit_attributes page to begin with
@
text
@d20 1
a20 1
 * $Id: create.php,v 1.3 2004/09/20 20:38:40 at Exp $
a54 2
    $object->setTitle($form->getValue("title"));
    $object->setDescription($form->getValue("description"));
@


1.3
log
@shortened template function names
@
text
@d20 1
a20 1
 * $Id: create.php,v 1.2 2004/09/20 20:31:40 at Exp $
d61 1
a61 1
    Utility::redirect("members.php?page=item&action={$cfg['action_id']['read']}"
@


1.2
log
@migrate away from using DateTime
@
text
@d20 1
a20 1
 * $Id: create.php,v 1.1 2004/09/19 02:48:34 at Exp $
d35 1
a35 1
    $formTemplate = Template::replaceWithinBlock($formTemplate, "TYPE",
d45 1
a45 1
    $formTemplate = Template::replaceWithinBlock($formTemplate, "OPTION",
d66 1
a66 1
    $res['content'] = Template::replaceValues($template, array(
@


1.1
log
@init
@
text
@d20 1
a20 1
 * $Id: create.php,v 1.6 2004/09/08 22:45:37 at Exp $
d57 1
a57 1
    $object->setPurchaseDate(new DateTime($form->getValue("purchase-date")));
@

