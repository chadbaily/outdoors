head	1.11;
access;
symbols
	init:1.1.1.1 socialclub:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2004.10.23.12.52.52;	author at;	state Exp;
branches;
next	1.10;

1.10
date	2004.10.06.17.53.57;	author at;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.23.13.26.04;	author at;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.20.20.38.39;	author at;	state Exp;
branches;
next	1.7;

1.7
date	2004.09.20.18.26.50;	author at;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.18.14.18.19;	author at;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.18.02.38.25;	author at;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.08.22.45.37;	author at;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.20.38.24;	author at;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.20.14.21.23;	author at;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.30.03.10.35;	author at;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.30.03.10.35;	author at;	state Exp;
branches;
next	;


desc
@@


1.11
log
@change class names to match table names; use getChildren(); merge code from AbsenceManager
@
text
@<?php
/*
 * This file is part of SocialClub (http://socialclub.sourceforge.net)
 * Copyright (C) 2004 Baron Schwartz <baron at sequent dot org>
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307  USA
 * 
 * $Id: view_answers.php,v 1.10 2004/10/06 17:53:57 at Exp $
 * Allows a member to view and edit his/her answers to questions.
 *
 * Two scenarios are possible:  The user chose to view answers for a specific
 * attendee, or the user chose to view his/her own answers for an adventure.
 * Either one will work, because the combination of c_adventure/c_member is a 
 * unique key on the [_]attendee table.
 */

include_once("status.php");
include_once("answer.php");
include_once("JoinAdventureManager.php");

# Get info about the attendee & adventure
$member =& new member();
$adventure =& new adventure();
$status =& new status();
$member->select($object->getMember());
$adventure->select($object->getAdventure());
$status->select($object->getStatus());

# Create templates 
$template = file_get_contents("templates/attendee/view_answers.php");
$template = $object->insertIntoTemplate(
    $member->insertIntoTemplate(
        $adventure->insertIntoTemplate($template)));

$error = false;

# Ensure that the adventure's start date is in the future
if (date("Y-m-d H:i:s") >= $adventure->getStartDate()) {
    $template = Template::unhide($template, "DEADLINE");
    $error = true;
}

# Create the form.
$formTemplate = file_get_contents("forms/attendee/view_answers.xml");

# Add the adventure's questions to the form.
$formTemplate = JoinAdventureManager::addQuestionsToForm($formTemplate, $adventure);
$formTemplate = Template::finalize($formTemplate);
$form =& new XMLForm($formTemplate, true);

# Set the answer values in the form, and save the answers for later (rekey them
# by question ID)
$answers = array();
foreach ($object->getChildren("answer") as $answer) {
    $answers[$answer->getQuestion()] = $answer;
    $form->setValue("question" . $answer->getQuestion(), $answer->getAnswerText());
}

# Validate the form
$form->snatch();
$form->validate();

if (!$error && $form->isValid()) {
    # Record the answers to the questions
    foreach ($adventure->getChildren("question") as $key => $q) {
        $answer =& new answer();
        # Update existing answers & create new ones
        if (isset($answers[$q->getUID()])) {
            $answers[$q->getUID()]->setAnswerText($form->getValue("question" . $q->getUID()));
            $answers[$q->getUID()]->update();
        }
        else {
            $answer =& new answer();
            $answer->setQuestion($q->getUID());
            $answer->setOwner($member->getUID());
            $answer->setAttendee($cfg['object']);
            $answer->setAnswerText($form->getValue("question" . $q->getUID()));
            $answer->insert();
        }
    }

    # Show confirmation message
    $template = Template::unhide($template, "SUCCESS");
}
elseif (!$error) {
    $template = Template::unhide($template, "INSTRUCTIONS");
}

if (!$error) {
    $template = Template::replace($template, array("FORM" => $form->toString()));
}

$res['content'] = Template::replace($template, array(
    "FORM" => $form->toString()));
$res['title'] = "Update Answers";

?>
@


1.10
log
@comm -> cmd
@
text
@d20 1
a20 1
 * $Id: view_answers.php,v 1.9 2004/09/23 13:26:04 at Exp $
d29 2
a30 1
include_once("Status.php");
d34 3
a36 3
$member =& new Member();
$adventure =& new Adventure();
$status =& new Status();
d63 2
a64 6
# Set the answer values in the form, and save the answers for later
$cmd =& $obj['conn']->createCommand();
$cmd->loadQuery("sql/queries/answer/select-by-attendee.sql");
$cmd->addParameter("attendee", $cfg['object']);
$cmd->addParameter("adventure", $object->getAdventure());
$result =& $cmd->executeReader();
d66 3
a68 4
while ($row =& $result->fetchRow()) {
    $answers[$row['c_question']] =& new Answer();
    $answers[$row['c_question']]->initFromRow($row);
    $form->setValue("question$row[c_question]", $row['c_answer_text']);
d77 2
a78 2
    foreach ($adventure->getQuestions() as $key => $q) {
        $answer =& new Answer();
d85 1
a85 1
            $answer =& new Answer();
d88 1
a88 1
            $answer->setMember($member->getUID());
@


1.9
log
@use start date not signup date
@
text
@d20 1
a20 1
 * $Id: view_answers.php,v 1.8 2004/09/20 20:38:39 at Exp $
d63 5
a67 5
$comm =& $obj['conn']->createCommand();
$comm->loadQuery("sql/queries/answer/select-by-attendee.sql");
$comm->addParameter("attendee", $cfg['object']);
$comm->addParameter("adventure", $object->getAdventure());
$result =& $comm->executeReader();
@


1.8
log
@shortened template function names
@
text
@d20 1
a20 1
 * $Id: view_answers.php,v 1.7 2004/09/20 18:26:50 at Exp $
d49 1
a49 1
if (date("Y-m-d H:i:s") >= $adventure->getSignupDate()) {
@


1.7
log
@use uppercase H for 24-hour time
@
text
@d20 1
a20 1
 * $Id: view_answers.php,v 1.6 2004/09/18 14:18:19 at Exp $
d50 1
a50 1
    $template = Template::unhideBlock($template, "DEADLINE");
d99 1
a99 1
    $template = Template::unhideBlock($template, "SUCCESS");
d102 1
a102 1
    $template = Template::unhideBlock($template, "INSTRUCTIONS");
d106 1
a106 1
    $template = Template::replaceValues($template, array("FORM" => $form->toString()));
d109 1
a109 1
$res['content'] = Template::replaceValues($template, array(
@


1.6
log
@uppercase getUid()
@
text
@d20 1
a20 1
 * $Id: view_answers.php,v 1.5 2004/09/18 02:38:25 at Exp $
d49 1
a49 2
$now =& new DateTime();
if ($now->compareTo($adventure->getSignupDate()) >= 0) {
@


1.5
log
@added joined_date column
@
text
@d20 1
a20 1
 * $Id: view_answers.php,v 1.4 2004/09/08 22:45:37 at Exp $
d85 3
a87 3
        if (isset($answers[$q->getUid()])) {
            $answers[$q->getUid()]->setAnswerText($form->getValue("question" . $q->getUID()));
            $answers[$q->getUid()]->update();
@


1.4
log
@new navbar and tabbed-box scheme; coalesced templates
@
text
@d20 1
a20 1
 * $Id: view_answers.php,v 1.3 2004/09/03 20:38:24 at Exp $
d63 13
a75 1
JoinAdventureManager::setAnswerValues($form, $object, $member);
d82 17
a98 1
    JoinAdventureManager::updateAnswers($member, $adventure, $form);
@


1.3
log
@migration from tabbed-boxes to navbar, and from table to CSS layout
@
text
@d20 1
a20 1
 * $Id: view_answers.php,v 1.2 2004/07/20 14:21:23 at Exp $
d42 3
a44 1
$template = $adventure->insertIntoTemplate($template);
a83 4
$res['tab'] = "View Answers";
include_once("tabbed-boxes/attendee-read.php");
$res['content'] = Template::replaceValues($template, array(
    "TABS" => $obj['inner_box']->toString()));
@


1.2
log
@put table name prefixes into code
@
text
@d20 1
a20 1
 * $Id: view_answers.php,v 1.1.1.1 2004/05/30 03:10:35 at Exp $
d41 2
a42 4
$wrapper = file_get_contents("templates/attendee/view_answers-wrapper.php");
$box = file_get_contents("templates/attendee/view_answers-box.php");
$wrapper = $member->insertIntoTemplate($wrapper);
$wrapper = $adventure->insertIntoTemplate($wrapper);
d49 1
a49 1
    $box = Template::unhideBlock($box, "DEADLINE");
d70 1
a70 1
    $box = Template::unhideBlock($box, "SUCCESS");
d73 1
a73 1
    $box = Template::unhideBlock($box, "INSTRUCTIONS");
d77 1
a77 1
    $box = Template::replaceValues($box, array("FORM" => $form->toString()));
d80 1
a80 1
$res['content'] = Template::replaceValues($box, array(
d84 2
a85 2
$res['content'] = Template::replaceValues($wrapper, array(
    "BOX" => $res['content']));
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
 * $Id: view_answers.php,v 1.5 2004/05/30 01:42:10 baron Exp $
d26 1
a26 1
 * unique key on the t_attendee table.
@


1.1.1.1
log
@init
@
text
@@
