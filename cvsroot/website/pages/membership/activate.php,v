head	1.13;
access;
symbols
	init:1.1.1.1 socialclub:1.1.1;
locks; strict;
comment	@# @;


1.13
date	2004.12.04.21.51.48;	author at;	state Exp;
branches;
next	1.12;

1.12
date	2004.11.01.19.06.58;	author at;	state Exp;
branches;
next	1.11;

1.11
date	2004.10.23.12.58.33;	author at;	state Exp;
branches;
next	1.10;

1.10
date	2004.10.04.18.13.06;	author at;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.20.20.38.40;	author at;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.20.20.31.40;	author at;	state Exp;
branches;
next	1.7;

1.7
date	2004.09.09.22.59.21;	author at;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.08.22.45.37;	author at;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.02.17.52.34;	author at;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.01.19.57.04;	author at;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.24.19.28.10;	author at;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.19.15.58.43;	author at;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.30.03.10.35;	author at;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.30.03.10.35;	author at;	state Exp;
branches;
next	;


desc
@@


1.13
log
@create transactions; move some of the expense/expense_report functionality into transactions
@
text
@<?php
/*
 * This file is part of SocialClub (http://socialclub.sourceforge.net)
 * Copyright (C) 2004 Baron Schwartz <baron at sequent dot org>
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307  USA
 * 
 * $Id: activate.php,v 1.12 2004/11/01 19:06:58 at Exp $
 */

require_once("membership_type.php");
include_once("Email.php");
require_once("transaction.php");
require_once("DateTime.php");

$template = file_get_contents("templates/membership/activate.php");

# Retrieve some objects we need
$type =& new membership_type();
$type->select($object->getType());
$member =& new member();
$member->select($object->getMember());

# Sanity check: must be inactive
if ($object->getStatus() == $cfg['status_id']['inactive']) {

    if ($type->getFlag("flexible")) {
        $template = Template::unhide($template, "FLEX");
    }
    else {
        $template = Template::unhide($template, "INFLEX");
    }

    # Determine the age of the member
    $now = getdate();
    $born = getdate(strtotime($member->getBirthDate()));
    $months = ($now['mon'] - $born['mon'] + 12) % 12;
    $years = $now['year'] - $born['year'];
    if ($now['mon'] < $born['mon']) {
        $years -= 1;
    }
    $template = Template::replace($template, array(
        "AGE" => "$years years and $months months")); 

    # Get the max expiration date of the user's active memberships from the
    # database
    $cmd =& $obj['conn']->createCommand();
    $cmd->loadQuery("sql/queries/membership/select-max-expiration-date.sql");
    $cmd->addParameter("member", $object->getMember());
    $maxExpire =& new DateTime($cmd->executeScalar());

    # Figure out when the suggested end date should be.  It depends on whether
    # the membership type is flexible or not.
    $begin =& new DateTime();
    $expire =& new DateTime();
    if ($type->getFlag("flexible")) {
        $begin = $maxExpire;
        switch ($type->getUnit()) {
        case "year":
            $expire = $begin->addYears($object->getUnitsGranted());
            break;
        case "month":
            $expire = $begin->addMonths($object->getUnitsGranted());
            break;
        case "day":
            $expire = $begin->addDays($object->getUnitsGranted());
            break;
        }
    }
    else {
        # Just use the values in the membership itself; these were set when the
        # membership was created.
        $begin =& new DateTime($object->getBeginDate());
        $expire =& new DateTime($object->getExpirationDate());
    }

    # Create the form and initialize it from the results of the date
    # calculations above.
    $form =& new XmlForm("forms/membership/activate.xml");
    $form->setValue("begin", $begin->toString("Y-m-d"));
    $form->setValue("expire", $expire->toString("Y-m-d"));
    $form->setValue("totalcost", $object->getTotalCost());

    # Overwrite the values in the form with what the user may have submitted
    $form->snatch();
    $form->validate();

    if ($form->isValid()) {
        $object->setStatus($cfg['status_id']['active']);
        $object->setAmountPaid($form->getValue("totalcost"));
        $object->setBeginDate($form->getValue("begin"));
        $object->setExpirationDate($form->getValue("expire"));
        $object->update();

        # Add a note to the member to say who activated the membership
        $member->addNote("$cfg[user] activated membership $cfg[object]");

        $msg =& new Email();
        $msgBody = file_get_contents("templates/emails/activation-notice.txt");
        $msgBody = Template::replace($msgBody, array(
            "CLUB_NAME" => $cfg['club_name'],
            "TITLE" => $type->getTitle(),
            "C_FULL_NAME" => $member->getFullName(),
            "BASEURL" => $cfg['site_url'] . $cfg['base_url'])
            + $object->getVarArray());
        $msg->setBody($msgBody);
        $msg->addTo($member->getEmail());
        $msg->setFrom($cfg['club_admin_email_name']);
        $msg->addHeader("Return-Path", $cfg['club_admin_email']);
        $msg->loadFooter("templates/emails/footer.txt");
        $msg->setSubject("Welcome to $cfg[club_name]!");
        $msg->send();

        # Record this transaction
        $cmd =& $obj['conn']->createCommand();
        $cmd->setCommandText("select c_uid from [_]expense_category "
            . "where c_title = 'Membership Dues'");
        $cat = $cmd->executeScalar();

        # Record this transaction
        $tran =& new transaction();
        $tran->setAmount(floatval($form->getValue("totalcost")));
        $tran->setCategory($cat);
        $tran->setDescription($member->getFullName()
            . "'s dues for membership $cfg[object]");
        $tran->setFrom($cfg['object']);
        $tran->setTo($cfg['root_uid']);
        $tran->insert();

        # Update the page
        $template = Template::unhide($template, "SUCCESS");
    }
    else {
        $template = Template::unhide($template, "INACTIVE");
        $template = Template::replace($template, array("FORM" => $form->toString()));
    }
}
else {
    $template = Template::unhide($template, "ACTIVE");
}

$res['content'] = $member->insertIntoTemplate(
    $type->insertIntoTemplate(
    $object->insertIntoTemplate($template)));
$res['title'] = "Activate Membership";

?>
@


1.12
log
@don't subscribe people to the main mailing list.  Add an expense report showing monies received
@
text
@d20 1
a20 1
 * $Id: activate.php,v 1.11 2004/10/23 12:58:33 at Exp $
d25 1
a25 2
require_once("expense_report.php");
require_once("expense.php");
d126 1
a126 2
        # Create a new 'expense report' and add an 'expense' (really a receipt)
        # to record this transaction
d131 6
a136 12
        $rept =& new expense_report();
        $rept->setMember($cfg['user']);
        $rept->setStatus($cfg['status_id']['paid']);
        $rept->insert();

        $rcpt =& new expense();
        $rcpt->setReport($rept->getUID());
        $rcpt->setAmount(-1 * floatval($form->getValue("totalcost")));
        $rcpt->setCategory($cat);
        $rcpt->setAdventure("");
        $rcpt->setMerchant("");
        $rcpt->setDescription($member->getFullName()
d138 3
a140 2
        $rcpt->setExpenseDate(date("Y-m-d"));
        $rcpt->insert();
@


1.11
log
@don't subscribe the member to the email list; change table names to match class names
@
text
@d20 1
a20 1
 * $Id: activate.php,v 1.10 2004/10/04 18:13:06 at Exp $
d24 3
a26 1
require_once("email_list.php");
d126 22
@


1.10
log
@stop using the owner- address of the officers list as the club admin email, and stop BCCing messages all over the place
@
text
@d20 1
a20 1
 * $Id: activate.php,v 1.9 2004/09/20 20:38:40 at Exp $
d23 2
a24 2
require_once("MembershipType.php");
require_once("EmailList.php");
d30 1
a30 1
$type =& new MembershipType();
d32 1
a32 1
$member =& new Member();
a123 6

        # Subscribe the member to the email list
        $list =& new EmailList();
        $list->select($cfg['main_email_list']);
        $list->subscribe($member);
        $list->processRequests();
@


1.9
log
@shortened template function names
@
text
@d20 1
a20 1
 * $Id: activate.php,v 1.8 2004/09/20 20:31:40 at Exp $
a120 1
        $msg->addBCC($cfg['club_admin_email']);
@


1.8
log
@migrate away from using DateTime
@
text
@d20 1
a20 1
 * $Id: activate.php,v 1.7 2004/09/09 22:59:21 at Exp $
d39 1
a39 1
        $template = Template::unhideBlock($template, "FLEX");
d42 1
a42 1
        $template = Template::unhideBlock($template, "INFLEX");
d53 1
a53 1
    $template = Template::replaceValues($template, array(
d111 1
a111 1
        $msgBody = Template::replaceValues($msgBody, array(
d133 1
a133 1
        $template = Template::unhideBlock($template, "SUCCESS");
d136 2
a137 2
        $template = Template::unhideBlock($template, "INACTIVE");
        $template = Template::replaceValues($template, array("FORM" => $form->toString()));
d141 1
a141 1
    $template = Template::unhideBlock($template, "ACTIVE");
@


1.7
log
@subscriptions can now be batched and done all at once
@
text
@d20 1
a20 1
 * $Id: activate.php,v 1.6 2004/09/08 22:45:37 at Exp $
d25 1
d46 5
a50 5
    $now =& new DateTime();
    $born =& $member->getBirthDate();
    $months = ($now->getMonth() - $born->getMonth() + 12) % 12;
    $years = $now->getYear() - $born->getYear();
    if ($now->getMonth() < $born->getMonth()) {
d84 2
a85 2
        $begin = $object->getBeginDate();
        $expire = $object->getExpirationDate();
d102 2
a103 2
        $object->setBeginDate(new DateTime($form->getValue("begin")));
        $object->setExpirationDate(new DateTime($form->getValue("expire")));
@


1.6
log
@new navbar and tabbed-box scheme; coalesced templates
@
text
@d20 1
a20 1
 * $Id: activate.php,v 1.5 2004/09/02 17:52:34 at Exp $
d129 1
@


1.5
log
@add a note when activating a member
@
text
@d20 1
a20 1
 * $Id: activate.php,v 1.4 2004/09/01 19:57:04 at Exp $
d26 2
a33 4
# Create templates for the page
$wrapper = file_get_contents("templates/membership/activate-wrapper.php");
$box = file_get_contents("templates/membership/activate-box.php");

d38 1
a38 1
        $box = Template::unhideBlock($box, "FLEX");
d41 1
a41 1
        $box = Template::unhideBlock($box, "INFLEX");
d52 1
a52 1
    $box = Template::replaceValues($box, array(
d131 1
a131 1
        $box = Template::unhideBlock($box, "SUCCESS");
d134 2
a135 2
        $box = Template::unhideBlock($box, "INACTIVE");
        $box = Template::replaceValues($box, array("FORM" => $form->toString()));
d139 1
a139 1
    $box = Template::unhideBlock($box, "ACTIVE");
a141 2
# Plug it all into the templates
$res['tab'] = "Activate";
d144 1
a144 4
    $object->insertIntoTemplate($box)));
include_once("tabbed-boxes/membership-read.php");
$res['content'] = Template::replaceValues($wrapper, array(
    "BOX" => $res['content']));
@


1.4
log
@removed reference to manager class
@
text
@d20 1
a20 1
 * $Id: activate.php,v 1.3 2004/08/24 19:28:10 at Exp $
d106 3
@


1.3
log
@include a required class
@
text
@d20 1
a20 1
 * $Id: activate.php,v 1.2 2004/08/19 15:58:43 at Exp $
a22 1
require_once("ActivateMembershipManager.php");
@


1.2
log
@susbscribe member when activating membership
@
text
@d20 1
a20 1
 * $Id: activate.php,v 1.1.1.1 2004/05/30 03:10:35 at Exp $
d25 1
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
 * $Id: activate.php,v 1.8 2004/05/30 01:42:18 baron Exp $
d124 4
a127 1
        # TODO: need to subscribe the member to the email list
@


1.1.1.1
log
@init
@
text
@@
